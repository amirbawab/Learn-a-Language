{"version":3,"sources":["serviceWorker.ts","components/Title.tsx","components/Card.tsx","pages/Info.tsx","pages/sections/Pronunciation.tsx","pages/sections/Example.tsx","pages/sections/Native.tsx","pages/sections/Reference.tsx","pages/Word.tsx","pages/Search.tsx","components/Button.tsx","pages/Flashcard.tsx","pages/Notification.tsx","Common.tsx","models/SoundData.tsx","models/ExampleData.tsx","models/WordData.tsx","index.tsx","db/StaticData.tsx"],"names":["Boolean","window","location","hostname","match","LLTitle","className","this","props","children","React","LLBorderCard","iconClassName","iconTag","undefined","icon","theme","title","LLBasicCard","title_tag","color","defaultProps","LLInfo","state","href","id","style","display","whiteSpace","LLPronunciation","data","map","val","key","get_language","get_sound","LLExample","example","example_card","length","example_id","get_sentence","get_sounds","sound","sound_id","toUpperCase","LLNative","e","word","preventDefault","on_word_select","regex","alias_array","html","exec","push","slice","result","on_resolve_aliases","regex_val","forEach","split","RegExp","part","alias","startsWith","has","get","onClick","get_word","resolve_aliases","LLReference","referenced_by","get_referenced_by","word_select","LLWord","native_sub_word","ref_sub_word","setState","that","get_key","sub_word","open","close","word_from_alias","get_alias","fontSize","alias_select","get_natives","sub_word_window","open_native_sub_word","close_native_sub_word","get_pronunciations","get_examples","ref_select","open_ref_sub_word","close_ref_sub_word","LLSearch","search_text","on_flashcard","input","refs","search","value","word_data","toLowerCase","natives","search_includes_native","substr","search_includes_word","len","i","includes","s_iter","w_iter","onSubmit","type","ref","onChange","on_search_change","placeholder","flashcard_mode","words","height","search_includes","LLSplitButton","on_click","class_val","extra_class","click_button","LLFlashcard","props_index","review_index","index","props_words_keys","words_keys","review_words_keys","hide_native","hide_pronunciation","hide_example","splice","indexOf","show_all_words","show_review_words","on_show_word","new_word","btn_class","main_page","next","native_section","pronunciation_section","example_section","on_alias_select","remove_word_from_review","review_word","toggle_native","toggle_pronunciation","toggle_example","previous","LLNotification","hidden","button","on_button_click","role","text","aria-label","on_close","md5_lib","require","LLSoundData","language","LLExampleData","sentence","sounds","json","pronunciation","to_json","LLWordData","pronunciations","examples","native_form","from_json","add_native","add_pronunciation","pval","add_sound","add_example","static_data","word_key_map","Map","word_alias_map","dummy","get_word_by_key","set","console","warn","word_1","word_2","nid","test","add_referenced_by","add_word","connect_words","hide_notification","render_notification","error_notification","notification_close_handler","word_select_handler","render_word_panel","flashcard_handler","Array","from","get_words","keys","array","current_id","tmp_val","rand_id","Math","floor","random","shuffle","ReactDOM","render","flashcard_alias_select_handler","resolve_aliases_handler","flashcard_show_word_handler","document","getElementById","render_flashcard_panel","callback","aliases","get_word_by_alias","word_from_alias_handler","render_info_panel","render_homepage","make_logo","version","fetch","headers","then","r","ok","Error","statusText","catch","error","render_logo","values","sort","a","b","localeCompare","render_search_panel","word_key","config","init_data","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCDSC,E,iLAVX,OACE,uBAAKC,UAAU,6DACb,sBAAIA,UAAU,mCACXC,KAAKC,MAAMC,e,GALAC,aCMhBC,E,iLAGF,IAAIC,EAAgB,uBAChBC,OAAUC,EAMd,OALGP,KAAKC,MAAMO,OACZH,GAAiBL,KAAKC,MAAMO,KAC5BF,EAAU,sBAAIP,UAAWM,KAIzB,uBAAKN,UAAU,0BACb,uBAAKA,UAAW,oBAAsBC,KAAKC,MAAMQ,MAAQ,sBACvD,uBAAKV,UAAU,aACb,uBAAKA,UAAU,qCACb,uBAAKA,UAAU,YACb,uBAAKA,UAAW,iCAAmCC,KAAKC,MAAMQ,MAAQ,wBAAyBT,KAAKC,MAAMS,OAC1G,uBAAKX,UAAU,0CAA0CC,KAAKC,MAAMC,WAEtE,uBAAKH,UAAU,YACZO,W,GApBUH,aAsCrBQ,E,iLAOF,IAAIC,OAAYL,EAShB,OARGP,KAAKC,MAAMS,QACZE,EACE,uBAAKb,UAAU,oBACb,sBAAIA,UAAW,6BAA+BC,KAAKC,MAAMY,OAAQb,KAAKC,MAAMS,SAMhF,uBAAKX,UAAU,oBACZa,EACD,uBAAKb,UAAU,aAAaC,KAAKC,MAAMC,e,GAnBrBC,aAApBQ,EACUG,aAAe,CAC3BD,MAAO,W,ICoFIE,E,2MA/HbC,MAAQ,G,wEAGN,OACE,uBAAKjB,UAAU,OACb,gBAAC,EAAD,gBACA,uBAAKA,UAAU,OACb,uBAAKA,UAAU,aACb,gBAAC,EAAD,KACE,+BACE,uDACA,2BACE,0BACE,8FACA,oGAIN,2BACA,+BACE,6EACA,2BACE,0BACE,sDAA6B,4CAC7B,oDAA2B,sFAC3B,2DAAkC,2BAAlC,IAAwC,uHACxC,+EAAsD,2CACtD,+CAAsB,qFACtB,gDAAuB,sHACvB,kDAAyB,qBAAGkB,KAAK,0BAAR,2BACzB,0BAAI,qBAAGA,KAAK,aAAR,iBAAJ,aAAmD,oCAAnD,cACA,+FACA,wCAAe,qBAAGA,KAAK,YAAR,+BAIrB,2BACA,2BAASC,GAAG,YACV,4CACA,wDACA,wBAAMC,MAAO,CAACC,QAAS,QAASC,WAAY,aAA5C,iWAyBF,2BACA,+BACE,4DACA,qCACS,2CADT,uBACqD,iCADrD,yEAE8C,oCAF9C,MAKF,2BACA,2BAASH,GAAG,WACV,qDACA,2BACE,0BACE,iGACA,qEAA4C,oCAA5C,QAAkE,yCAClE,sDACA,iEACA,oDAA2B,4CAA3B,qCACA,+DAAsC,4DACtC,yEAAgD,2CAAwB,2BACtE,wBAAMC,MAAO,CAACC,QAAS,QAASC,WAAY,aAA5C,irBA0BF,wFAA+D,qCAA/D,8EAEI,6CAFJ,gCAGA,uCAAc,wCAAd,iDACA,mCAAU,8DAAV,mC,GApHClB,aCkBNmB,E,iLAfX,OACE,2BACE,uBAAKvB,UAAU,OACZC,KAAKC,MAAMsB,KAAKC,KAAI,SAACC,EAAKP,GACzB,OAAQ,gBAAC,EAAD,CAAeT,MAAM,UAAUiB,IAAKR,EAAIR,MAAOe,EAAIE,eAAiB,iBACtDnB,KAAM,yBACzBiB,EAAIG,sB,GARWzB,aCyCf0B,E,2MAxCbb,MAAQ,CACNc,QAAS,I,wEAGT,IAAIC,OAAexB,EA4BnB,OA3BGP,KAAKC,MAAMsB,KAAKS,OAAS,IAC1BD,EACE,uBAAKhC,UAAU,OACb,uBAAKA,UAAU,aACb,gBAAC,EAAD,CAAaW,MAAM,YAChBV,KAAKC,MAAMsB,KAAKC,KAAI,SAACM,EAASG,GAC7B,OACE,uBAAKP,IAAKO,GACR,2BAAMH,EAAQI,gBACd,2BAAMJ,EAAQK,aAAaX,KAAI,SAACY,EAAOC,GACrC,OACE,uBAAKX,IAAKW,GACR,yBAAOtC,UAAU,qBAAoB,6BAAKqC,EAAMT,eAAeW,cAA1B,oBACrC,4BAAOF,EAAMR,kBAInB,uBAAK7B,UAAU,4BAW7B,2BACGgC,O,GAnCe5B,aCsEToC,E,uLAnEEC,EAAQC,GACrBD,EAAEE,iBACF1C,KAAKC,MAAM0C,eAAeF,K,sCAEZhB,GAOd,IAP4B,IAAD,OACvBmB,EAAQ,UACR/C,OAAQU,EACRsC,EAAc,GACdC,EAAO,gBAAC,WAAD,KAAiBrB,GAGrB5B,EAAQ+C,EAAMG,KAAKtB,IACxBoB,EAAYG,KAAKnD,EAAM,GAAGoD,MAAM,IAGlC,GAAGJ,EAAYb,OAAS,EAAG,CACzB,IAAIkB,EAASlD,KAAKC,MAAMkD,mBAAmBN,GACvCO,EAAY,GAEhBF,EAAOG,SAAQ,SAACZ,EAAkBf,GACR,IAArB0B,EAAUpB,SACXoB,GAAa,KAEfA,GAAa,IAAM1B,KAGrB,IAAI4B,EAAQ7B,EAAI6B,MAAM,IAAIC,OAAO,IAAIH,EAAU,IAAK,MACpDN,EACE,gBAAC,WAAD,KACGQ,EAAM9B,KAAI,SAACgC,EAActC,GACxB,IAAIuC,EACJ,GAAGD,EAAKE,WAAW,MAAQR,EAAOS,IAAIF,EAAQD,EAAKP,MAAM,IAAK,CAC5D,IAAIR,EAAOS,EAAOU,IAAIH,GACtB,OAAO,qBACH/B,IAAKR,EACL2C,QAAS,SAACrB,GAAD,OAAO,EAAKG,eAAeH,EAAGC,IACvCxB,KAAK,MAAMwB,EAAMqB,YAEvB,OAAO,gBAAC,WAAD,CAAgBpC,IAAKR,GAAKsC,OAMzC,OACE,gBAAC,WAAD,KACGV,K,+BAIG,IAAD,OACP,OACE,2BACE,uBAAK/C,UAAU,OACZC,KAAKC,MAAMsB,KAAKC,KAAI,SAACC,EAAKP,GACzB,OACE,gBAAC,EAAD,CAAeQ,IAAKR,EAAIT,MAAM,OAAOC,MAAM,cAAcF,KAAK,mBAC3D,EAAKuD,gBAAgBtC,a,GA1DftB,aC8BR6D,E,oLA9BDxB,EAAQC,GAClBD,EAAEE,iBACF1C,KAAKC,MAAM0C,eAAeF,K,+BAElB,IAAD,OACHwB,OAAgB1D,EAiBpB,OAhBkD,IAA/CP,KAAKC,MAAMwC,KAAKyB,oBAAoBlC,SACrCiC,EACE,2BACE,uBAAKlE,UAAU,OACb,uBAAKA,UAAU,aACb,gBAAC,EAAD,CAAaW,MAAM,gBAChBV,KAAKC,MAAMwC,KAAKyB,oBAAoB1C,KAAI,SAACC,EAAKP,GAC7C,OAAO,sBAAIQ,IAAKR,GAAI,qBAAGD,KAAK,KAAK4C,QAAS,SAACrB,GAAD,OAAO,EAAK2B,YAAY3B,EAAGf,KAAOA,EAAIqC,qBAU5F,gBAAC,WAAD,KACGG,O,GAzBiB9D,aCgHXiE,E,2MAjGbpD,MAII,CACFyB,KAAM,EAAKxC,MAAMwC,KACjB4B,gBAAiB,KACjBC,aAAc,M,4EAGH7B,GACXzC,KAAKuE,SAAS,CAACF,gBAAiB5B,M,iCAGvBA,GACTzC,KAAKuE,SAAS,CAACD,aAAc7B,M,4CAGT+B,EAAWhC,GAC/BA,EAAEE,iBACF8B,EAAKD,SAAS,CAACF,gBAAiB,S,2CAGbG,EAAWhC,GAC9BA,EAAEE,iBACF8B,EAAKvE,MAAM0C,eAAe6B,EAAKxD,MAAMqD,gBAAiBI,a,yCAGrCD,EAAWhC,GAC5BA,EAAEE,iBACF8B,EAAKD,SAAS,CAACD,aAAc,S,wCAGbE,EAAWhC,GAC3BA,EAAEE,iBACF8B,EAAKvE,MAAM0C,eAAe6B,EAAKxD,MAAMsD,aAAcG,a,sCAGrCC,EAA6BC,EAAWC,EAAYnE,GAAgB,IAAD,OACjF,GAAgB,OAAbiE,EAGH,OACE,uBAAK3E,UAAW,iBAAmBU,EAAQ,SACzC,uBAAKV,UAAU,OACb,uBAAKA,UAAU,wBACb,qBAAGkB,KAAK,KAAK4C,QAAS,SAACrB,GAAD,OAAOmC,EAAK,EAAMnC,KAAI,qBAAGzC,UAAU,yBAAzD,SAEF,uBAAKA,UAAU,wBACb,qBAAGkB,KAAK,KAAK4C,QAAS,SAACrB,GAAD,OAAOoC,EAAM,EAAMpC,KAAI,qBAAGzC,UAAU,qBAA1D,WAGJ,gBAACqE,EAAD,CACI1C,IAAKgD,EAASD,UACdhC,KAAMiC,EACNvB,mBAAoBnD,KAAKC,MAAMkD,mBAC/BR,eAAgB3C,KAAKC,MAAM0C,eAC3BkC,gBAAiB7E,KAAKC,MAAM4E,qB,+BAK5B,IAAD,OACHpB,OAAQlD,EAUZ,MATmC,KAAhCP,KAAKgB,MAAMyB,KAAKqC,cACjBrB,EACE,2BACE,yBAAOtC,MAAO,CAAC4D,SAAS,IAAIhF,UAAU,kBACpC,oCAAYC,KAAKgB,MAAMyB,KAAKqC,gBAMlC,uBAAK/E,UAAU,OACb,gBAAC,EAAD,KACE,2BACE,qBAAGA,UAAU,qBADf,IACuC,yBAAIC,KAAKgB,MAAMyB,KAAKqB,aAE1DL,GAEH,gBAAC,EAAD,CACMN,mBAAoBnD,KAAKC,MAAMkD,mBAC/BR,eAAgB,SAACF,GAAD,OAAU,EAAKuC,aAAavC,IAC5ClB,KAAMvB,KAAKgB,MAAMyB,KAAKwC,gBAC3BjF,KAAKkF,gBAAgBlF,KAAKgB,MAAMqD,gBAAiBrE,KAAKmF,qBAAsBnF,KAAKoF,sBAAuB,QACzG,gBAAC,EAAD,CAAiB7D,KAAMvB,KAAKgB,MAAMyB,KAAK4C,uBACvC,gBAAC,EAAD,CAAW9D,KAAMvB,KAAKgB,MAAMyB,KAAK6C,iBACjC,gBAAC,EAAD,CACM3C,eAAgB,SAACF,GAAD,OAAU,EAAK8C,WAAW9C,IAC1CA,KAAMzC,KAAKgB,MAAMyB,OACtBzC,KAAKkF,gBAAgBlF,KAAKgB,MAAMsD,aAActE,KAAKwF,kBAAmBxF,KAAKyF,mBAAoB,gB,GA5FnFtF,aCmHNuF,E,2MA9Hb1E,MAAQ,CACN2E,YAAa,I,8EAGAnD,GACbA,EAAEE,iBACF1C,KAAKC,MAAM2F,iB,kCAGDpD,EAAQC,GAClBD,EAAEE,iBACF1C,KAAKC,MAAM0C,eAAeF,EAAKgC,a,yCAI/B,IAAIoB,EAAQ7F,KAAK8F,KAAKC,OACtB/F,KAAKuE,SAAS,CAACoB,YAAaE,EAAMG,U,sCAGpBC,GACd,IAAIN,EAAc3F,KAAKgB,MAAM2E,YAAYO,cAIzC,GAAGP,EAAYjC,WADK,WACsB,CACxC,IAAIyC,EAAUF,EAAUhB,cACxB,OAAOjF,KAAKoG,uBAAuBT,EAAYU,OAH7B,UAGkDrE,OAClE2D,EAAY3D,OAJI,UAImBA,QAASmE,GAK7CR,EAAYjC,WADG,WAEhBiC,EAAcA,EAAYU,OAFV,QAE6BrE,OAAQ2D,EAAY3D,OAFjD,QAEsEA,SAExF,IAAIS,EAAOwD,EAAUnC,WAAWoC,cAChC,OAAOlG,KAAKsG,qBAAqBX,EAAalD,K,6CAGzBkD,EAAqBQ,GAE1C,IADA,IAAII,EAAMJ,EAAQnE,OACVwE,EAAE,EAAGA,EAAID,EAAKC,IACpB,GAAGL,EAAQK,GAAGC,SAASd,GACrB,OAAO,EAGX,OAAO,I,2CAGYA,EAAqBlD,GACxC,GAAGkD,EAAY3D,OAASS,EAAKT,OAC3B,OAAO,EAOT,IAFA,IAAI0E,EAAS,EACTC,EAAS,EACPD,EAASf,EAAY3D,QAAU2E,EAASlE,EAAKT,QAC9C2D,EAAYe,KAAYjE,EAAKkE,IAC9BD,IAEFC,IAEF,OAAOD,IAAWf,EAAY3D,S,+BAGtB,IAAD,OACP,OACE,2BACE,wBACIjC,UAAU,yFACV6G,SAAU,SAACpE,GAAD,OAAOA,EAAEE,mBACrB,uBAAK3C,UAAU,eACb,yBACI8G,KAAK,OACLC,IAAI,SACJd,MAAOhG,KAAKgB,MAAM2E,YAClB5F,UAAU,uCACVgH,SAAU,kBAAM,EAAKC,oBACrBC,YAAY,sBAChB,uBAAKlH,UAAU,sBACb,0BAAQA,UAAU,mBAChB,qBAAGA,UAAU,2BAInB,uBAAKA,UAAW,OACd,yBAAOA,UAAW,cAChB,2BAAK,0CACL,2BACE,wBAAMA,UAAW,cAAjB,SADF,iBAC2D,2BACzD,wBAAMA,UAAW,cAAjB,WAFF,6BAQN,sBAAIA,UAAU,yBACd,sBAAIA,UAAU,YACZ,qBAAGA,UAAU,WAAWkB,KAAK,KAAK4C,QAAS,SAACrB,GAAO,EAAK0E,eAAe1E,KACrE,qBAAGzC,UAAU,uBADf,cACmD,6BAAO,8BAAMC,KAAKC,MAAMkH,MAAMnF,OAAvB,QAI5D,sBAAIjC,UAAU,yBACd,uBAAKoB,MAAO,CAACiG,OAAQ,UACnB,uBAAKrH,UAAU,sCACZC,KAAKC,MAAMkH,MAAM3F,KAAI,SAACiB,EAAkBvB,GACvC,OACE,gBAAC,WAAD,CAAgBQ,IAAKR,GAClB,EAAKmG,gBAAgB5E,GACpB,sBAAI1C,UAAU,YACZ,qBAAGA,UAAU,qBAAqBkB,KAAK,KAAK4C,QAAS,SAACrB,GAAO,EAAK2B,YAAY3B,EAAGC,KAASA,EAAKqB,kBAE/FvD,a,GApHCJ,aCDjBmH,E,qLACS9E,GACPxC,KAAKC,MAAMsH,YACb/E,EAAEE,mB,+BAGI,IAAD,OACH8E,EAAY,WAAWxH,KAAKC,MAAMQ,MAAQ,kBAI9C,OAHGT,KAAKC,MAAMwH,cACZD,GAAa,IAAMxH,KAAKC,MAAMwH,aAG9B,qBAAGxG,KAAK,KAAK4C,QAAS,SAACrB,GAAD,OAAO,EAAKkF,aAAalF,IAAIzC,UAAWyH,GAC5D,wBAAMzH,UAAU,sBACd,qBAAGA,UAAWC,KAAKC,MAAMO,QAE3B,wBAAMT,UAAU,QACbC,KAAKC,MAAMC,e,GAjBMC,aC6QbwH,GD9OaxH,Y,2MCvB1ByH,YAAsB,E,EACtBC,aAAuB,E,EACvBC,OAAiB,E,EACjBC,iBAA6B,EAAK9H,MAAM+H,W,EACxCC,kBAA8B,G,EAC9BD,WAAuB,EAAK/H,MAAM+H,W,EAClChH,MAKI,CACFyB,KAAM,KACNyF,aAAa,EACbC,oBAAoB,EACpBC,cAAc,G,wEAGP3F,GACPzC,KAAKuE,SAAS,CACZ9B,KAAMA,EACNyF,aAAa,EACbC,oBAAoB,EACpBC,cAAc,M,oCAShB,OAJIpI,KAAKiI,kBAAkBxB,SAASzG,KAAKgB,MAAMyB,KAAMgC,aACnDzE,KAAKiI,kBAAkBjF,KAAKhD,KAAKgB,MAAMyB,KAAMgC,WAC7CzE,KAAKuE,SAASvE,KAAKgB,SAEd,I,gDAgBP,OAZGhB,KAAKiI,kBAAkBxB,SAASzG,KAAKgB,MAAMyB,KAAMgC,aAClDzE,KAAKiI,kBAAkBI,OAAOrI,KAAKiI,kBAAkBK,QAAQtI,KAAKgB,MAAMyB,KAAMgC,WAAY,GACrD,IAAlCzE,KAAKiI,kBAAkBjG,OACxBhC,KAAKuI,iBAEFvI,KAAKgI,aAAehI,KAAKiI,kBAC1BjI,KAAKwI,oBAELxI,KAAKuE,SAASvE,KAAKgB,SAIlB,I,uCAGS,IAAD,OAOf,OANAhB,KAAK6H,aAAe7H,KAAK8H,MACzB9H,KAAKgI,WAAahI,KAAK+H,iBACvB/H,KAAK8H,MAAQ9H,KAAK4H,YAAc5H,KAAKgI,WAAWhG,OAChDhC,KAAKC,MAAMwI,aAAazI,KAAKgI,WAAWhI,KAAK8H,QAAQ,SAACrF,GACpD,EAAKiG,SAASjG,OAET,I,0CAGY,IAAD,OASlB,OARqC,IAAlCzC,KAAKiI,kBAAkBjG,SACxBhC,KAAK4H,YAAc5H,KAAK8H,MACxB9H,KAAKgI,WAAahI,KAAKiI,kBACvBjI,KAAK8H,MAAQ9H,KAAK4H,YAAc5H,KAAKgI,WAAWhG,OAChDhC,KAAKC,MAAMwI,aAAazI,KAAKgI,WAAWhI,KAAK8H,QAAQ,SAACrF,GACpD,EAAKiG,SAASjG,QAGX,I,6BAGD,IAAD,OAOL,OANGzC,KAAKgI,WAAWhG,OAAS,IAC1BhC,KAAK8H,OAAS9H,KAAK8H,MAAQ,GAAK9H,KAAKgI,WAAWhG,OAChDhC,KAAKC,MAAMwI,aAAazI,KAAKgI,WAAWhI,KAAK8H,QAAQ,SAACrF,GACpD,EAAKiG,SAASjG,QAGX,I,iCAGG,IAAD,OAOT,OANGzC,KAAKgI,WAAWhG,OAAS,IAC1BhC,KAAK8H,OAAS9H,KAAK8H,OAAS9H,KAAKgI,WAAWhG,OAAS,IAAMhC,KAAKgI,WAAWhG,OAC3EhC,KAAKC,MAAMwI,aAAazI,KAAKgI,WAAWhI,KAAK8H,QAAQ,SAACrF,GACpD,EAAKiG,SAASjG,QAGX,I,sCAKP,OADAzC,KAAKuE,SAAS,CAAC2D,aAAclI,KAAKgB,MAAMkH,eACjC,I,6CAKP,OADAlI,KAAKuE,SAAS,CAAC4D,oBAAqBnI,KAAKgB,MAAMmH,sBACxC,I,uCAKP,OADAnI,KAAKuE,SAAS,CAAC6D,cAAepI,KAAKgB,MAAMoH,gBAClC,I,+BAGC,IAAD,OACHO,EAAY,GACZC,OAAYrI,EAChB,GAAuB,OAApBP,KAAKgB,MAAMyB,KACZkG,EAAY,WACZC,EACE,uBAAK7I,UAAU,OACb,uBAAKA,UAAU,aACb,gBAAC,EAAD,KACE,uBAAKA,UAAU,wCACb,uBAAKA,UAAU,QAAf,iDACA,gBAAC,EAAD,CAAeU,MAAM,YAAYD,KAAK,cAAc+G,SAAU,kBAAM,EAAKsB,SAAzE,iBAQL,CAEL,IAAIC,OAAiBvI,EACjBwI,OAAwBxI,EACxByI,OAAkBzI,EAClBP,KAAKgB,MAAMkH,cACbY,EACE,gBAAC,EAAD,CACM3F,mBAAoBnD,KAAKC,MAAMkD,mBAC/BR,eAAgB3C,KAAKC,MAAMgJ,gBAC3B1H,KAAMvB,KAAKgB,MAAMyB,KAAKwC,iBAI5BjF,KAAKgB,MAAMmH,qBACbY,EAAwB,gBAAC,EAAD,CAAiBxH,KAAMvB,KAAKgB,MAAMyB,KAAK4C,wBAG7DrF,KAAKgB,MAAMoH,eACbY,EAAkB,gBAAC,EAAD,CAAWzH,KAAMvB,KAAKgB,MAAMyB,KAAK6C,kBAGrDsD,EACE,gBAAC,WAAD,KACE,gBAAC,EAAD,KAAS,qBAAG7I,UAAU,qBAAtB,IAA8C,yBAAIC,KAAKgB,MAAMyB,KAAKqB,YAC/D9D,KAAKgI,aAAehI,KAAKiI,kBAAoB,yBAAOlI,UAAU,QAAO,sCAA0B,IAGlG,uBAAKA,UAAU,OACb,uBAAKA,UAAU,6BACb,gBAAC,EAAD,CACIU,MAAM,UACND,KAAK,eACLiH,YAAY,SACZF,SAAU,WACR,OAAQ,EAAKU,kBAAkBxB,SAAS,EAAKzF,MAAMyB,KAAMgC,WAClC,EAAKyE,0BAA1B,EAAKC,gBAETnJ,KAAKiI,kBAAkBxB,SAASzG,KAAKgB,MAAMyB,KAAMgC,WAC7B,eAApB,mBAEJ,gBAAC,EAAD,CACIhE,MAAM,SACND,KAAK,kBACLiH,YAAY,cACZF,SAAU,WACR,OAAO,EAAKS,aAAe,EAAKD,iBAC9B,EAAKS,oBAAsB,EAAKD,mBAErCvI,KAAKgI,aAAehI,KAAK+H,iBACxB,uBAAyB,oBAKjC,uBAAKhI,UAAU,OACb,uBAAKA,UAAU,kBACb,gBAAC,EAAD,CACIU,MAAM,OACND,KAAK,aACLiH,YAAsD,IAAzCzH,KAAKgB,MAAMyB,KAAKwC,cAAcjD,OAAe,WAAa,GACvEuF,SAAU,kBAAM,EAAK6B,kBACtBpJ,KAAKgB,MAAMkH,YAAc,OAAS,OALrC,kBASHY,EAED,uBAAK/I,UAAU,OACb,uBAAKA,UAAU,kBACb,gBAAC,EAAD,CACIU,MAAM,UACND,KAAK,aACLiH,YAA6D,IAAhDzH,KAAKgB,MAAMyB,KAAK4C,qBAAqBrD,OAAe,WAAa,GAC9EuF,SAAU,kBAAM,EAAK8B,yBACtBrJ,KAAKgB,MAAMmH,mBAAqB,OAAS,OAL5C,oBASHY,EAED,uBAAKhJ,UAAU,OACb,uBAAKA,UAAU,kBACb,gBAAC,EAAD,CACIU,MAAM,UACND,KAAK,aACLiH,YAAuD,IAA1CzH,KAAKgB,MAAMyB,KAAK6C,eAAetD,OAAe,WAAa,GACxEuF,SAAU,kBAAM,EAAK+B,mBACtBtJ,KAAKgB,MAAMoH,aAAe,OAAS,OALtC,cASHY,GAKP,OACE,uBAAKjJ,UAAU,OACb,gBAAC,EAAD,KAAS,qBAAGA,UAAU,sBAAtB,IAA+C,uCAC/C,uBAAKA,UAAU,OACb,uBAAKA,UAAU,6BACb,gBAAC,EAAD,CACIU,MAAM,YACND,KAAK,oBACLiH,YAAakB,EACbpB,SAAU,kBAAM,EAAKgC,aAJzB,aAQF,uBAAKxJ,UAAU,6BAEVC,KAAK8H,OAAS,EACd9H,KAAK8H,MAAM,EAAI,MAAQ9H,KAAKgI,WAAWhG,OAAS,KAC/ChC,KAAKiI,kBAAkBjG,OAAS,cAClC,gBAAkBhC,KAAKgI,WAAWhG,QAGtC,uBAAKjC,UAAU,6BACb,gBAAC,EAAD,CACIU,MAAM,YACND,KAAK,qBACLiH,YAAakB,EACbpB,SAAU,kBAAM,EAAKsB,SAJzB,UASHD,O,GAhQiBzI,cCwBXqJ,E,2MA5BbxI,MAAQ,G,wEAGN,GAAGhB,KAAKC,MAAMwJ,OACZ,OAAO,gBAAC,WAAD,MAET,IAAIC,EAAS,gBAAC,WAAD,MAQb,OAPG1J,KAAKC,MAAMyJ,OAAO1H,OAAS,IAC5B0H,EACE,0BAAQ3J,UAAU,0CAA0C8D,QAAS7D,KAAKC,MAAM0J,iBAC7E3J,KAAKC,MAAMyJ,SAKhB,uBAAK3J,UAAU,OACb,uBAAKA,UAAW,eAAeC,KAAKC,MAAMQ,MAAM,+BAAgCmJ,KAAK,SAClF5J,KAAKC,MAAM4J,KACXH,EACD,0BAAQ7C,KAAK,SAAS9G,UAAU,QAAQ+J,aAAW,QAAQjG,QAAS7D,KAAKC,MAAM8J,UAC7E,2C,GArBiB5J,aCZvB6J,EAAUC,EAAQ,I,ICaTC,E,WAZb,WAAoBC,EAA0B/H,GAAgB,yBAA1C+H,WAAyC,KAAf/H,Q,2DAE5C,OAAOpC,KAAKmK,W,kCAGZ,OAAOnK,KAAKoC,Q,gCAGZ,MAAO,CAAC+H,SAAUnK,KAAKmK,SAAU/H,MAAOpC,KAAKoC,W,KCmBlCgI,E,WAxBb,WAAoBC,GAAmB,yBAAnBA,WAAkB,KAD9BC,OAAwB,G,2DAG9B,OAAOtK,KAAKqK,W,gCAEGF,EAAkB/H,GACjCpC,KAAKsK,OAAOtH,KAAK,IAAIkH,EAAYC,EAAU/H,M,mCAEzBlB,GAClBlB,KAAKsK,OAAOjC,OAAOnH,EAAI,K,mCAGvB,OAAOlB,KAAKsK,S,gCAGZ,IAAIC,EAAY,GAMhB,OALAA,EAAKF,SAAWrK,KAAKqK,SACrBE,EAAKC,cAAgB,GACrBxK,KAAKsK,OAAOjH,SAAQ,SAAC5B,GACnB8I,EAAKC,cAAcxH,KAAKvB,EAAIgJ,cAEvBF,M,KCiFIG,E,WA9Fb,WAAYjI,GAAmC,IAArBgB,EAAoB,uDAAJ,GAAI,yBANtCkH,eAAgC,GAMM,KALtCC,SAA4B,GAKU,KAJtCzE,QAAoB,GAIkB,KAHtC1D,UAGsC,OAFtCgB,WAEsC,OADtCQ,cAA8B,GAEpCjE,KAAKyC,KAAOA,EACZzC,KAAKyD,MAAQA,EAAM5D,MAAM,UAAY4D,EAAQ,G,8DAEtB0G,EAAkB/H,GACzCpC,KAAK2K,eAAe3H,KAAK,IAAIkH,EAAYC,EAAU/H,M,2CAEzBlB,GAC1BlB,KAAK2K,eAAetC,OAAOnH,EAAI,K,2CAG/B,OAAOlB,KAAK2K,iB,kCAEK7I,GACjB9B,KAAK4K,SAAS5H,KAAKlB,K,qCAECZ,GACpBlB,KAAK4K,SAASvC,OAAOnH,EAAI,K,qCAGzB,OAAOlB,KAAK4K,W,iCAGZ,OAAO5K,KAAKyC,O,kCAGZ,OAAOzC,KAAKyD,Q,gCAGZ,OHtCgBoG,EGsCL7J,KAAK8D,WHrCXkG,EAAQH,GADV,IAAaA,I,iCGwCAgB,GAChB7K,KAAKmG,QAAQnD,KAAK6H,K,oCAEC3J,GACnBlB,KAAKmG,QAAQkC,OAAOnH,EAAI,K,oCAGxB,OAAOlB,KAAKmG,U,wCAEW1D,GACvBzC,KAAKiE,cAAcjB,KAAKP,K,0CAGxB,OAAOzC,KAAKiE,gB,gCA4BZ,IAAIsG,EAAa,GAejB,OAdAA,EAAK9H,KAAOzC,KAAKyC,KACjB8H,EAAK9G,MAAQzD,KAAKyD,MAClB8G,EAAKM,YAAc,GACnB7K,KAAKmG,QAAQ9C,SAAQ,SAAC5B,GACpB8I,EAAKM,YAAY7H,KAAKvB,MAExB8I,EAAKzI,QAAU,GACf9B,KAAK4K,SAASvH,SAAQ,SAAC5B,GACrB8I,EAAKzI,QAAQkB,KAAKvB,EAAIgJ,cAExBF,EAAKC,cAAgB,GACrBxK,KAAK2K,eAAetH,SAAQ,SAAC5B,GAC3B8I,EAAKC,cAAcxH,KAAKvB,EAAIgJ,cAEvBF,I,8BAGP,OAAOG,EAAWI,UAAU9K,KAAKyK,c,iCA5CXF,GACtB,IAAItE,EAAY,IAAIyE,EAAWH,EAAK9H,KAAM8H,EAAK9G,OAsB/C,OArBG8G,EAAKM,aACNN,EAAKM,YAAYxH,SAAQ,SAAC5B,GACxBwE,EAAU8E,WAAWtJ,MAGtB8I,EAAKC,eACND,EAAKC,cAAcnH,SAAQ,SAAC5B,GAC1BwE,EAAU+E,kBAAkBvJ,EAAI0I,SAAU1I,EAAIW,UAG/CmI,EAAKzI,SACNyI,EAAKzI,QAAQuB,SAAQ,SAAC5B,GACpB,IAAIK,EAAU,IAAIsI,EAAc3I,EAAI4I,UACjC5I,EAAI+I,eACL/I,EAAI+I,cAAcnH,SAAQ,SAAC4H,GACzBnJ,EAAQoJ,UAAUD,EAAKd,SAAUc,EAAK7I,UAG1C6D,EAAUkF,YAAYrJ,MAGnBmE,M,KCnEPmF,EAAc,I,iDCLRC,aAAe,IAAIC,I,KACnBC,eAAiB,IAAID,I,wDAE3B,OAAOtL,KAAKqL,e,+BAEL5I,GACP,IAAI+I,EAAQ,IAAId,EAAWjI,OAAMlC,GACjC,OAAOP,KAAKyL,gBAAgBD,EAAM/G,a,sCAEpB/C,GACd,OAAG1B,KAAKqL,aAAa1H,IAAIjC,GAChB1B,KAAKqL,aAAazH,IAAIlC,GAExB,O,wCAES+B,GAChB,OAAGzD,KAAKuL,eAAe5H,IAAIF,GAClBzD,KAAKuL,eAAe3H,IAAIH,GAE1B,O,+BAEQhB,GACfzC,KAAKqL,aAAaK,IAAIjJ,EAAKgC,UAAWhC,GACd,KAArBA,EAAKqC,cACH9E,KAAKuL,eAAe5H,IAAIlB,EAAKqC,cAC9B6G,QAAQC,KAAK,kBAAmBnJ,EAAKqC,aAEvC9E,KAAKuL,eAAeG,IAAIjJ,EAAKqC,YAAarC,M,sCAGrB,IAAD,OACtBzC,KAAKqL,aAAahI,SAAQ,SAACwI,GACzB,IAAIpI,EAAQoI,EAAO/G,YACN,KAAVrB,GACD,EAAK4H,aAAahI,SAAQ,SAACyI,GACzB,IAAI3F,EAAU2F,EAAO7G,cACrB,IAAI,IAAI8G,KAAO5F,EACb,GAAI,IAAI5C,OAAO,MAAME,EAAM,SAAUuI,KAAK7F,EAAQ4F,IAAO,CACvDF,EAAOI,kBAAkBH,GACzB,e,kCASR9L,KAAKkM,SAASxB,EAAWI,UAAU,CAAC,KAAO,OAAO,MAAQ,OAAO,YAAc,CAAC,UAAK,cAAgB,CAAC,CAAC,SAAW,UAAU,MAAQ,QAAQ,QAAU,CAAC,CAAC,SAAW,iBAAiB,cAAgB,CAAC,CAAC,SAAW,UAAU,MAAQ,oBAEnO9K,KAAKkM,SAASxB,EAAWI,UAAU,CAAC,KAAO,QAAQ,MAAQ,QAAQ,YAAc,CAAC,eAAK,cAAc,cAAgB,CAAC,CAAC,SAAW,iBAAiB,MAAQ,WAAW,QAAU,MAEhL9K,KAAKkM,SAASxB,EAAWI,UAAU,CAAC,KAAO,MAAM,MAAQ,MAAM,YAAc,CAAC,UAAK,cAAgB,CAAC,CAAC,SAAW,SAAS,MAAQ,OAAO,QAAU,MAEpJ9K,KAAKmM,oB,MD1CT,SAASC,IACPC,EAAoB,CAAC5C,QAAQ,IAG/B,SAAS6C,EAAmBzC,GAC1BwC,EAAoB,CAAC5L,MAAO,SAAUgJ,QAAQ,EAAOI,KAAMA,IAO7D,SAAS0C,IACPH,IAGF,SAASI,EAAoB/J,GAC3BgK,EAAkBhK,GAGpB,SAASiK,KAuDT,WACE,IAAI1E,EAAa2E,MAAMC,KAAKxB,EAAYyB,YAAYC,SJ1F/C,SAAiBC,GAItB,IAHA,IAAIC,EAAaD,EAAM/K,OACnBiL,OAAU1M,EACV2M,OAAU3M,EACP,IAAMyM,GACXE,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,GAErCC,EAAUF,EADVC,GAAc,GAEdD,EAAMC,GAAcD,EAAMG,GAC1BH,EAAMG,GAAWD,GIkFnBK,CAAQtF,GACRuF,IAASC,OAAO,kBAAC,EAAD,CACdxF,WAAYA,EACZiB,gBAAiBwE,EACjBtK,mBAAoBuK,EACpBjF,aAAckF,IAAgCC,SAASC,eAAe,iBA7DxEC,GAGF,SAASH,EAA4BjM,EAAaqM,GAChD,IAAI9H,EAAYmF,EAAYK,gBAAgB/J,GAC3B,OAAduE,EACD8H,EAAS9H,GAETqG,EAAmB,iCAIvB,SAASoB,EAAwBM,GAC/B,IAAI9K,EAAkC,IAAIoI,IAO1C,OANA0C,EAAQ3K,SAAQ,SAACI,GACf,IAAIwC,EAAYmF,EAAY6C,kBAAkBxK,GAC7B,OAAdwC,GACD/C,EAAOwI,IAAIjI,EAAOwC,MAGf/C,EAGT,SAASuK,EAA+BhL,GACtC4J,EAAoB,CAClB5L,MAAO,UACPgJ,QAAQ,EACRI,KAAM,oEAAsEpH,EAAKqB,WAAa,IAC9F4F,OAAQ,aACRC,gBAAiB,WACf8C,EAAkBhK,EAAMgC,WACxB2H,OAKN,SAAS8B,EAAwBzK,GAC/B,OAAO2H,EAAY6C,kBAAkBxK,GAOvC,SAAS0K,IACPZ,IAASC,OAAO,kBAAC,EAAD,MAAWI,SAASC,eAAe,iBAGrD,SAASO,KA0CT,WACE,IAAIC,EAAY,SAACC,GACff,IAASC,OACL,yBAAKzN,UAAU,QACb,uBAAGA,UAAU,iEAAiEkB,KAAK,KAAK4C,QAAS,kBAAMsK,MACrG,yBAAKpO,UAAU,kCAAiC,uBAAGA,UAAU,qBAC7D,yBAAKA,UAAU,2BAAf,qBAEF,yBAAKA,UAAU,eAAc,2BAAOA,UAAU,cAAcuO,KAE/DV,SAASC,eAAe,UAG7BU,MAAM,gBAAiB,CAACC,QAAS,CAAC,OAAU,gBAC3CC,MAAK,SAACC,GACL,IAAIA,EAAEC,GACJ,MAAMC,MAAMF,EAAEG,YAEhB,OAAOH,EAAE7E,UAEV4E,MAAK,SAAC5E,GACLwE,EAAUxE,MAEXiF,OAAM,SAACC,GACNV,EAAU,sBAjEZW,GA8BF,WACE,IAAIC,EAAStC,MAAMC,KAAKxB,EAAYyB,YAAYoC,UAAUC,MAAK,SAAUC,EAAGC,GAC1E,OAAOD,EAAErL,WAAWoC,cAAcmJ,cAAcD,EAAEtL,WAAWoC,kBAE/DqH,IAASC,OAAO,kBAAC,EAAD,CACIrG,MAAO8H,EACPtM,eAAgB6J,EAChB5G,aAAc8G,IAClBkB,SAASC,eAAe,iBArCxCyB,GACAnB,IAaF,SAAS1B,EAAkB8C,GACzB,IAAItJ,EAAYmF,EAAYK,gBAAgB8D,GAC3B,OAAdtJ,EACDsH,IAASC,OAAO,kBAAC,EAAD,CACI9L,IAAKuE,EAAUnC,WACfrB,KAAMwD,EACN9C,mBAAoBuK,EACpB/K,eAAgB6J,EAChB3H,gBAAiBqJ,IACrBN,SAASC,eAAe,iBAExCvB,EAAmB,uBA2CvB,SAASD,EAAoBmD,IAC3BA,EAA0BA,GAA2B,IAC9C/O,MAAmB+O,EAAO/O,OAAoB,UACrD+O,EAAO3F,KAAmB2F,EAAO3F,MAAoB,GACrD2F,EAAO/F,OAAmB+F,EAAO/F,SAAoB,EACrD+F,EAAO9F,OAAmB8F,EAAO9F,QAAoB,GACrD8F,EAAO7F,gBAAmB6F,EAAO7F,iBAAqB,aACtD4D,IAASC,OAAO,kBAAC,EAAD,CACM/D,OAAQ+F,EAAO/F,OACfhJ,MAAO+O,EAAO/O,MACdoJ,KAAM2F,EAAO3F,KACbH,OAAQ8F,EAAO9F,OACfC,gBAAiB6F,EAAO7F,gBACxBI,SAAUwC,IAChBqB,SAASC,eAAe,iBA/J1CzC,EAAYqE,YAqKVrB,IjB1CI,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.12d3ecd9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\n\nexport interface LLTitleProps {}\nexport interface LLTitleState {}\n \nclass LLTitle extends React.Component<LLTitleProps, LLTitleState> {\n  render() {\n    return (\n      <div className=\"d-sm-flex align-items-center justify-content-between mb-4\">\n        <h1 className=\"h3 mb-0 text-gray-800 col-lg-12\">\n          {this.props.children}\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default LLTitle;\n","import * as React from 'react';\n\n/**\n * Border Card\n */\nexport interface LLBorderCardProps {\n  title: string;\n  icon: string;\n  theme: string;\n}\nexport interface LLBorderCardState {}\nclass LLBorderCard extends React.Component<LLBorderCardProps, LLBorderCardState> {\n  render() {\n    // Update background icon\n    let iconClassName = \"fa-2x text-gray-300 \";\n    let iconTag = undefined;\n    if(this.props.icon) {\n      iconClassName += this.props.icon;\n      iconTag = <li className={iconClassName}></li>\n    }\n\n    return (\n      <div className=\"col-xl-4 col-md-6 mb-4\">\n        <div className={\"card border-left-\" + this.props.theme + \" shadow h-100 py-2\"}>\n          <div className=\"card-body\">\n            <div className=\"row no-gutters align-items-center\">\n              <div className=\"col mr-2\">\n                <div className={\"text-xs font-weight-bold text-\" + this.props.theme + \" text-uppercase mb-1\"}>{this.props.title}</div>\n                <div className=\"h5 mb-0 font-weight-bold text-gray-800\">{this.props.children}</div>\n              </div>\n              <div className=\"col-auto\">\n                {iconTag}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n/**\n * Basic Card\n */\nexport interface LLBasicCardProps {\n  title?: string;\n  color?: string;\n}\nexport interface LLBasicCardState {}\nclass LLBasicCard extends React.Component<LLBasicCardProps, LLBasicCardState> {\n  public static defaultProps = {\n    color: \"primary\"\n  };\n\n  render() {\n\n    let title_tag = undefined;\n    if(this.props.title) {\n      title_tag = (\n        <div className=\"card-header py-3\">\n          <h6 className={\"m-0 font-weight-bold text-\" + this.props.color}>{this.props.title}</h6>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"card shadow mb-4\">\n        {title_tag}\n        <div className=\"card-body\">{this.props.children}</div>\n      </div>\n    );\n  }\n}\n\nexport {\n  LLBorderCard,\n  LLBasicCard\n};\n","import * as React from 'react';\nimport LLTitle from '../components/Title';\nimport {LLBasicCard} from '../components/Card';\n\nexport interface LLInfoProps {}\nexport interface LLInfoState {}\n \nclass LLInfo extends React.Component<LLInfoProps, LLInfoState> {\n  state = {}\n\n  render() {\n    return (\n      <div className=\"m-2\">\n        <LLTitle>Welcome</LLTitle>\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <LLBasicCard>\n              <section>\n                <h4>How to use this platform?</h4>\n                <div>\n                  <ul>\n                    <li>Click on \"Flashcard\" to review all the words in a shuffled order</li>\n                    <li>Learn about a particular word by searching for it then selecting it</li>\n                  </ul>\n                </div>\n              </section>\n              <hr/>\n              <section>\n                <h4>How to copy this platform to learn my language?</h4>\n                <div>\n                  <ul>\n                    <li>Create a new repository: <code>my-language</code></li>\n                    <li>Clone your repository: <code>git clone https://github.com/USERNAME/my-language.git</code></li>\n                    <li>Open a new terminal and type: <br/> <code>cd my-language/ && git submodule add https://github.com/amirbawab/Learn-a-Language.git</code></li>\n                    <li>Create a diretory to store your words JSON files: <code>mkdir data</code></li>\n                    <li>Install packages: <code>npm install --prefix ./Learn-a-Language/application/</code></li>\n                    <li>Start application: <code>LL_DATA_DIR=\"$PWD/data/\" npm run application --prefix ./Learn-a-Language/application/</code></li>\n                    <li>Open your browser at <a href=\"http://localhost:3000/\">http://localhost:3000/</a></li>\n                    <li><a href=\"#add-word\">Add new words</a> into the <code>data</code> directory</li>\n                    <li>Upon create or save, the application should automatically refresh</li>\n                    <li>[Optional] <a href=\"#publish\">Publish to Github pages</a></li>\n                  </ul>\n                </div>\n              </section>\n              <hr/>\n              <section id=\"add-word\">\n                <h4>Word JSON file</h4>\n                <p>Example of a word JSON file</p>\n                <code style={{display: \"block\", whiteSpace: \"pre-wrap\"}}>\n              {`{\n  \"word\":\"Tea\",\n  \"alias\":\"tea\",\n  \"native_form\":[\"茶\"],\n  \"pronunciation\":[\n    {\n      \"language\":\"English\",\n      \"sound\":\"Chai\"\n    }\n  ],\n  \"example\":[\n    {\n      \"sentence\":\"I want tea\",\n      \"pronunciation\":[\n        {\n          \"language\":\"English\",\n          \"sound\":\"wo yao chai\"\n        }\n      ]\n    }\n  ]\n}`}\n                </code>\n              </section>\n              <hr/>\n              <section>\n                <h4>How to reference another word?</h4>\n                <div>\n                  In the <code>native_form</code> JSON property, use <code>#</code> followed by the alias of\n                  the word you would like to reference. (e.g. <code>#tea</code>)\n                </div>\n              </section>\n              <hr/>\n              <section id=\"publish\">\n                <h4>Publish to Github pages</h4>\n                <div>\n                  <ul>\n                    <li>Go to Account Settings > Developer Settings > Personal access token</li>\n                    <li>Generate a new token with access scope: <code>repo</code> and <code>workflow</code></li>\n                    <li>Copy the generated token</li>\n                    <li>Go to Repository Settings > Secrets</li>\n                    <li>Add a new secret named <code>ACCESS_TOKEN</code> and paste the token as its value</li>\n                    <li>Create github worflows directory: <code>mkdir -p .github/workflows/</code></li>\n                    <li>In the created directory, add a new worflow <code>ghpages.yml</code><br/>\n                      <code style={{display: \"block\", whiteSpace: \"pre-wrap\"}}>\n {`\nname: gh-pages\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - uses: actions/setup-node@v1\n    - name: Build and Deploy\n      uses: JamesIves/github-pages-deploy-action@releases/v2\n      env:\n        ACCESS_TOKEN: $\\{{ secrets.ACCESS_TOKEN }}\n        BASE_BRANCH: master\n        BRANCH: gh-pages\n        FOLDER: 'build'\n        BUILD_SCRIPT: git submodule update --init --recursive && npm install --prefix Learn-a-Language/application && LL_DATA_DIR=\"$PWD/data\" npm run build --prefix Learn-a-Language/application && mv Learn-a-Language/application/build ./build\n`}\n                      </code>\n                    </li>\n                    <li>Make sure that your word JSON files are located inside the <code>data </code> \n                        directory. If you decided to name it something else make sure to update the\n                        <code> BUILD_SCRIPT</code> attribute in the above code</li>\n                    <li>Now every <code>git push</code> will rebuild the website with your new words</li>\n                    <li>Visit <code>USERNAME.github.io/my-language</code> to view the website</li>\n                  </ul>\n                </div>\n              </section>\n            </LLBasicCard>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LLInfo;\n","import * as React from 'react';\nimport {LLBorderCard} from '../../components/Card';\nimport LLSoundData from '../../models/SoundData';\n\nexport interface LLPronunciationProps {\n  data: LLSoundData[];\n}\nexport interface LLPronunciationState {}\nclass LLPronunciation extends React.Component<LLPronunciationProps, LLPronunciationState> {\n  render() {\n    return (\n      <div>\n        <div className=\"row\">\n          {this.props.data.map((val, id) => {\n            return (<LLBorderCard  theme=\"success\" key={id} title={val.get_language() + \" Pronunciation\"} \n                                  icon={\"fas fa-microphone-alt\"}>\n              {val.get_sound()}\n            </LLBorderCard>);\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LLPronunciation;\n","import * as React from 'react';\nimport {LLBasicCard} from '../../components/Card';\nimport LLExampleData from '../../models/ExampleData';\n\nexport interface LLExampleProps {\n  data: LLExampleData[];\n}\nexport interface LLExampleState {}\nclass LLExample extends React.Component<LLExampleProps, LLExampleState> {\n  state = {\n    example: {}\n  }\n  render() {\n    let example_card = undefined;\n    if(this.props.data.length > 0) {\n      example_card = (\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <LLBasicCard title=\"Examples\">\n              {this.props.data.map((example, example_id) => {\n                return (\n                  <div key={example_id}>\n                    <div>{example.get_sentence()}</div>\n                    <div>{example.get_sounds().map((sound, sound_id) => {\n                      return (\n                        <div key={sound_id}>\n                          <small className=\"text-primary mr-2\"><b>[{sound.get_language().toUpperCase()} PRONUNCIATION]</b></small>\n                          <span>{sound.get_sound()}</span>\n                        </div>\n                      );\n                    })}</div>\n                    <div className=\"border-top my-3\"></div>\n                  </div>\n                );\n              })}\n            </LLBasicCard>\n          </div>\n        </div>\n      );\n    }   \n\n    return (\n      <div>\n        {example_card}\n      </div>\n    );\n  }\n}\n\nexport default LLExample;\n","import * as React from 'react';\nimport {LLBorderCard} from '../../components/Card';\nimport LLWordData from '../../models/WordData';\n\nexport interface LLNativeProps {\n  data: string[];\n  on_resolve_aliases: (aliases: string[]) => Map<string, LLWordData>;\n  on_word_select: (word: LLWordData) => void;\n}\nexport interface LLNativeState {}\nclass LLNative extends React.Component<LLNativeProps, LLNativeState> {\n  on_word_select(e: any, word: LLWordData) {\n    e.preventDefault();\n    this.props.on_word_select(word);\n  }\n  resolve_aliases(val: string) {\n    let regex = /(#\\w+)/g;\n    let match = undefined;\n    let alias_array = [];\n    let html = <React.Fragment>{val}</React.Fragment>;\n\n    // find all keys\n    while((match = regex.exec(val))) {\n      alias_array.push(match[0].slice(1));\n    }\n    // resolve them\n    if(alias_array.length > 0) {\n      let result = this.props.on_resolve_aliases(alias_array);\n      let regex_val = \"\"\n      // build regex\n      result.forEach((word: LLWordData, key: string) => {\n        if(regex_val.length !== 0) {\n          regex_val += \"|\";\n        }\n        regex_val += \"#\" + key;\n      });\n      // construct new html\n      let split = val.split(new RegExp(\"(\"+regex_val+\")\", \"g\"));\n      html = (\n        <React.Fragment>\n          {split.map((part: string, id) => {\n            let alias: string;\n            if(part.startsWith(\"#\") && result.has(alias = part.slice(1))) {\n              let word = result.get(alias);\n              return <a \n                  key={id} \n                  onClick={(e) => this.on_word_select(e, word!)} \n                  href=\"#/\">{word!.get_word()}</a>\n            }\n            return <React.Fragment key={id}>{part}</React.Fragment>\n          })}\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {html}\n      </React.Fragment>\n    );\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"row\">\n          {this.props.data.map((val, id) => {\n            return (\n              <LLBorderCard  key={id} theme=\"info\" title=\"Native form\" icon=\"fas fa-language\">\n                {this.resolve_aliases(val)}\n              </LLBorderCard>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LLNative;\n","import * as React from 'react';\nimport {LLBasicCard} from '../../components/Card';\nimport LLWordData from '../../models/WordData';\n\nexport interface LLReferenceProps {\n  word: LLWordData;\n  on_word_select: (word: LLWordData) => void;\n}\nexport interface LLReferenceState {}\nclass LLReference extends React.Component<LLReferenceProps, LLReferenceState> {\n  word_select(e: any, word: LLWordData) {\n    e.preventDefault();\n    this.props.on_word_select(word);\n  }\n  render() {\n    let referenced_by = undefined;\n    if(this.props.word.get_referenced_by().length !== 0) {\n      referenced_by = (\n        <div>\n          <div className=\"row\">\n            <div className=\"col-lg-12\">\n              <LLBasicCard title=\"Reference By\">\n                {this.props.word.get_referenced_by().map((val, id) => {\n                  return <li key={id}><a href=\"#/\" onClick={(e) => this.word_select(e, val)}>{val.get_word()}</a></li>;\n                })}\n              </LLBasicCard>\n            </div>\n          </div>\n        </div>\n      \n      );\n    }\n    return (\n      <React.Fragment>\n        {referenced_by}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default LLReference;\n","import * as React from 'react';\n\n// Components\nimport LLTitle from '../components/Title';\n\n// Sections\nimport LLPronunciation from './sections/Pronunciation';\nimport LLExample from './sections/Example';\nimport LLNative from './sections/Native';\nimport LLReference from './sections/Reference';\n\n// Models\nimport LLWordData from '../models/WordData';\n\nexport interface LLWordProps {\n  word: LLWordData;\n  on_resolve_aliases: (aliases: string[]) => Map<string, LLWordData>;\n  on_word_select: (key: string) => void;\n  word_from_alias: (alias: string) => LLWordData | null;\n}\n \nexport interface LLWordState {}\n \nclass LLWord extends React.Component<LLWordProps, LLWordState> {\n  state : {\n    word: LLWordData,\n    native_sub_word: LLWordData | null,\n    ref_sub_word: LLWordData | null\n  } = {\n    word: this.props.word,\n    native_sub_word: null,\n    ref_sub_word: null,\n  }\n\n  alias_select(word: LLWordData) {\n    this.setState({native_sub_word: word});\n  }\n\n  ref_select(word: LLWordData) {\n    this.setState({ref_sub_word: word});\n  }\n\n  close_native_sub_word(that: any, e: any) {\n    e.preventDefault();\n    that.setState({native_sub_word: null})\n  }\n\n  open_native_sub_word(that: any, e: any) {\n    e.preventDefault();\n    that.props.on_word_select(that.state.native_sub_word!.get_key());\n  }\n\n  close_ref_sub_word(that: any, e: any) {\n    e.preventDefault();\n    that.setState({ref_sub_word: null})\n  }\n\n  open_ref_sub_word(that: any, e: any) {\n    e.preventDefault();\n    that.props.on_word_select(that.state.ref_sub_word!.get_key());\n  }\n\n  sub_word_window(sub_word: LLWordData | null, open: any, close: any, theme: string) {\n    if(sub_word === null) {\n      return undefined;\n    }\n    return (\n      <div className={\"border border-\" + theme + \" mb-4\"}>\n        <div className=\"row\">\n          <div className=\"col-md-6 text-center\">\n            <a href=\"#/\" onClick={(e) => open(this, e)}><i className=\"far fa-file-word m-2\"></i>Open</a>\n          </div>\n          <div className=\"col-md-6 text-center\">\n            <a href=\"#/\" onClick={(e) => close(this, e)}><i className=\"fas fa-times m-2\"></i>Close</a>\n          </div>\n        </div>\n        <LLWord \n            key={sub_word.get_key()}\n            word={sub_word!} \n            on_resolve_aliases={this.props.on_resolve_aliases} \n            on_word_select={this.props.on_word_select} \n            word_from_alias={this.props.word_from_alias} />\n      </div>\n    );\n  }\n\n  render() {\n    let alias = undefined;\n    if(this.state.word.get_alias() !== \"\") {\n      alias = (\n        <div>\n          <small style={{fontSize:15}}className=\"text-secondary\">\n            <em>alias: {this.state.word.get_alias()}</em>\n          </small>\n        </div>\n      );\n    }\n    return (\n      <div className=\"m-2\">\n        <LLTitle>\n          <div>\n            <i className=\"far fa-file-word\"></i> <b>{this.state.word.get_word()}</b>\n          </div>\n          {alias}\n        </LLTitle>\n        <LLNative\n              on_resolve_aliases={this.props.on_resolve_aliases}\n              on_word_select={(word) => this.alias_select(word)}\n              data={this.state.word.get_natives()}/>\n        {this.sub_word_window(this.state.native_sub_word, this.open_native_sub_word, this.close_native_sub_word, \"info\")}\n        <LLPronunciation data={this.state.word.get_pronunciations()}/>\n        <LLExample data={this.state.word.get_examples()}/>\n        <LLReference \n              on_word_select={(word) => this.ref_select(word)} \n              word={this.state.word}/>\n        {this.sub_word_window(this.state.ref_sub_word, this.open_ref_sub_word, this.close_ref_sub_word, \"warning\")}\n      </div>\n    );\n  }\n}\n\nexport default LLWord;\n","import * as React from 'react';\nimport LLWordData from '../models/WordData';\n\nexport interface LLSearchProps {\n  on_word_select: (key: string) => void;\n  on_flashcard: () => void;\n  words: LLWordData[];\n}\n \nexport interface LLSearchState {}\n \nclass LLSearch extends React.Component<LLSearchProps, LLSearchState> {\n  state = {\n    search_text: \"\",\n  }\n\n  flashcard_mode(e: any) {\n    e.preventDefault();\n    this.props.on_flashcard();\n  }\n\n  word_select(e: any, word: LLWordData) {\n    e.preventDefault();\n    this.props.on_word_select(word.get_key());\n  }\n\n  on_search_change() {\n    let input = this.refs.search as HTMLInputElement;\n    this.setState({search_text: input.value});\n  }\n\n  search_includes(word_data: LLWordData) {\n    let search_text = this.state.search_text.toLowerCase();\n\n    // Search native\n    let native_prefix = \"native:\";\n    if(search_text.startsWith(native_prefix)) {\n      let natives = word_data.get_natives();\n      return this.search_includes_native(search_text.substr(native_prefix.length, \n        search_text.length - native_prefix.length), natives);\n    }\n\n    // Search word\n    let word_prefix = \"word:\";\n    if(search_text.startsWith(word_prefix)) {\n      search_text = search_text.substr(word_prefix.length, search_text.length - word_prefix.length);\n    }\n    let word = word_data.get_word().toLowerCase();\n    return this.search_includes_word(search_text, word)\n  }\n\n  search_includes_native(search_text: string, natives: string[]) {\n    let len = natives.length;\n    for(let i=0; i < len; i++) {\n      if(natives[i].includes(search_text)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  search_includes_word(search_text: string, word: string) {\n    if(search_text.length > word.length) {\n      return false;\n    }\n\n    // Letters in the search field must exist\n    // in the target 'word' and in the same order\n    let s_iter = 0;\n    let w_iter = 0;\n    while(s_iter < search_text.length && w_iter < word.length) {\n      if(search_text[s_iter] === word[w_iter]) {\n        s_iter++;\n      }\n      w_iter++;\n    }\n    return s_iter === search_text.length;\n  }\n\n  render() { \n    return (\n      <div>\n        <form \n            className=\"d-none d-sm-inline-block form-inline mr-md-3 ml-md-3 my-2 my-md-0 mw-100 navbar-search\"\n            onSubmit={(e) => e.preventDefault()}>\n          <div className=\"input-group\">\n            <input  \n                type=\"text\" \n                ref=\"search\" \n                value={this.state.search_text}\n                className=\"form-control bg-light border-0 small\" \n                onChange={() => this.on_search_change()} \n                placeholder=\"Search for a word\"/>\n            <div className=\"input-group-append\">\n              <button className=\"btn btn-warning\">\n                <i className=\"fas fa-search fa-sm\"></i>\n              </button>\n            </div>\n          </div>\n          <div className={\"m-2\"}>\n            <small className={\"text-white\"}>\n              <div><b>Search tips:</b></div>\n              <div>\n                <code className={\"text-white\"}>word:</code> = search word<br/>\n                <code className={\"text-white\"}>native:</code> = search  native text\n              </div>\n            </small>\n          </div>\n        </form>\n\n        <hr className=\"sidebar-divider my-0\" />\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"#/\" onClick={(e) => {this.flashcard_mode(e)}}>\n            <i className=\"fas fa-comment-alt\"></i> Flashcard <small><em>({this.props.words.length})</em></small>\n          </a>\n        </li>\n\n        <hr className=\"sidebar-divider my-0\" />\n        <div style={{height: \"400px\"}}>\n          <div className=\"overflow-auto h-100 d-inline-block\">\n            {this.props.words.map((word: LLWordData, id: number) => {\n              return (\n                <React.Fragment key={id}>\n                  {this.search_includes(word) ? (\n                    <li className=\"nav-item\">\n                      <a className=\"nav-link pb-2 pt-2\" href=\"#/\" onClick={(e) => {this.word_select(e, word)}}>{word.get_word()}</a>\n                    </li>\n                  ) : undefined}\n                </React.Fragment>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default LLSearch;\n","import * as React from 'react';\n\nexport interface LLSplitButtonProps {\n  icon: string;\n  theme: string;\n  on_click: () => boolean;\n  extra_class?: string;\n}\nexport interface LLSplitButtonState {}\n\nclass LLSplitButton extends React.Component<LLSplitButtonProps, LLSplitButtonState> {\n  click_button(e: any) {\n    if(!this.props.on_click()) {\n      e.preventDefault();\n    }\n  }\n  render() {\n    let class_val = \"btn btn-\"+this.props.theme + \" btn-icon-split\";\n    if(this.props.extra_class) {\n      class_val += \" \" + this.props.extra_class;\n    }\n    return (\n      <a href=\"#/\" onClick={(e) => this.click_button(e)} className={class_val}>\n        <span className=\"icon text-white-50\">\n          <i className={this.props.icon}></i>\n        </span>\n        <span className=\"text\">\n          {this.props.children}\n        </span>\n      </a>\n    );\n  }\n}\n\nexport interface LLBasicButtonProps {\n  theme: string;\n  on_click: () => void;\n  extra_class?: string;\n}\nexport interface LLBasicButtonState {}\n\nclass LLBasicButton extends React.Component<LLBasicButtonProps, LLBasicButtonState> {\n  render() {\n    let class_val = \"btn btn-\"+this.props.theme;\n    if(this.props.extra_class) {\n      class_val += \" \" + this.props.extra_class;\n    }\n    return (\n      <button className={class_val} onClick={this.props.on_click}>\n        {this.props.children}\n      </button>\n    );\n  }\n}\n\n\nexport {LLSplitButton, LLBasicButton};\n","import * as React from 'react';\nimport LLTitle from '../components/Title';\nimport LLWordData from '../models/WordData';\nimport {LLBasicCard} from '../components/Card';\nimport {LLSplitButton} from '../components/Button';\nimport LLPronunciation from './sections/Pronunciation';\nimport LLExample from './sections/Example';\nimport LLNative from './sections/Native';\n\nexport interface LLFlashcardProps {\n  words_keys: string[];\n  on_show_word: (word: string, callback: (word: LLWordData) => void) => void;\n  on_resolve_aliases: (aliases: string[]) => Map<string, LLWordData>;\n  on_alias_select: (word: LLWordData) => void;\n}\nexport interface LLFlashcardState {}\n \nclass LLFlashcard extends React.Component<LLFlashcardProps, LLFlashcardState> {\n  props_index: number = 0;\n  review_index: number = 0;\n  index: number = -1;\n  props_words_keys: string[] = this.props.words_keys;\n  review_words_keys: string[] = [];\n  words_keys: string[] = this.props.words_keys;\n  state: {\n    word: LLWordData | null;\n    hide_native: boolean;\n    hide_pronunciation: boolean;\n    hide_example: boolean;\n  } = {\n    word: null,\n    hide_native: true,\n    hide_pronunciation: true,\n    hide_example: true\n  }\n\n  new_word(word: LLWordData) {\n    this.setState({\n      word: word,\n      hide_native: true,\n      hide_pronunciation: true,\n      hide_example: true\n    });\n  }\n\n  review_word() {\n    if(!this.review_words_keys.includes(this.state.word!.get_key())) {\n      this.review_words_keys.push(this.state.word!.get_key())\n      this.setState(this.state)\n    }\n    return false;\n  }\n\n  remove_word_from_review() {\n    if(this.review_words_keys.includes(this.state.word!.get_key())) {\n      this.review_words_keys.splice(this.review_words_keys.indexOf(this.state.word!.get_key()), 1);\n      if(this.review_words_keys.length === 0) {\n        this.show_all_words();\n      } else {\n        if(this.words_keys === this.review_words_keys) {\n          this.show_review_words();\n        } else {\n          this.setState(this.state)\n        }\n      }\n    }\n    return false;\n  }\n\n  show_all_words() {\n    this.review_index = this.index;\n    this.words_keys = this.props_words_keys;\n    this.index = this.props_index % this.words_keys.length;\n    this.props.on_show_word(this.words_keys[this.index], (word: LLWordData) => {\n      this.new_word(word);\n    });\n    return false;\n  }\n\n  show_review_words() {\n    if(this.review_words_keys.length !== 0) {\n      this.props_index = this.index;\n      this.words_keys = this.review_words_keys;\n      this.index = this.props_index % this.words_keys.length;\n      this.props.on_show_word(this.words_keys[this.index], (word: LLWordData) => {\n        this.new_word(word);\n      });\n    }\n    return false;\n  }\n\n  next() {\n    if(this.words_keys.length > 0) {\n      this.index = (this.index + 1) % this.words_keys.length;\n      this.props.on_show_word(this.words_keys[this.index], (word: LLWordData) => {\n        this.new_word(word);\n      });\n    }\n    return false;\n  }\n\n  previous() {\n    if(this.words_keys.length > 0) {\n      this.index = (this.index + (this.words_keys.length - 1)) % this.words_keys.length;\n      this.props.on_show_word(this.words_keys[this.index], (word: LLWordData) => {\n        this.new_word(word);\n      });\n    }\n    return false;\n  }\n\n  toggle_native() {\n    this.setState({hide_native: !this.state.hide_native});\n    return false;\n  }\n\n  toggle_pronunciation() {\n    this.setState({hide_pronunciation: !this.state.hide_pronunciation});\n    return false;\n  }\n  \n  toggle_example() {\n    this.setState({hide_example: !this.state.hide_example});\n    return false;\n  }\n\n  render() {\n    let btn_class = \"\";\n    let main_page = undefined;\n    if(this.state.word === null) {\n      btn_class = \"disabled\";\n      main_page = (\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <LLBasicCard>\n              <div className=\"col-xl-12 col-md-12 mb-4 text-center\">\n                <div className=\"mb-4\">Click \"Start\" to begin the Flashcard exercise</div>\n                <LLSplitButton theme=\"secondary\" icon=\"fas fa-play\" on_click={() => this.next()}>\n                  Start\n                </LLSplitButton>\n              </div>\n            </LLBasicCard>\n          </div>\n        </div>\n      );\n    } else {\n\n      let native_section = undefined;\n      let pronunciation_section = undefined;\n      let example_section = undefined;\n      if(!this.state.hide_native) {\n        native_section = (\n          <LLNative\n                on_resolve_aliases={this.props.on_resolve_aliases}\n                on_word_select={this.props.on_alias_select}\n                data={this.state.word.get_natives()}/>\n        );\n      }\n\n      if(!this.state.hide_pronunciation) {\n        pronunciation_section = <LLPronunciation data={this.state.word.get_pronunciations()}/>; \n      }\n\n      if(!this.state.hide_example) {\n        example_section = <LLExample data={this.state.word.get_examples()}/>;\n      }\n\n      main_page = (\n        <React.Fragment>\n          <LLTitle><i className=\"far fa-file-word\"></i> <b>{this.state.word.get_word()}</b> \n            {this.words_keys === this.review_words_keys ? <small className=\"ml-2\"><i>(Review)</i></small> : \"\"}\n          </LLTitle>\n\n          <div className=\"row\">\n            <div className=\"col-md-12 mb-4 text-right\">\n              <LLSplitButton \n                  theme=\"warning\" \n                  icon=\"far fa-clock\" \n                  extra_class=\"btn-sm\"\n                  on_click={() => {\n                    return !this.review_words_keys.includes(this.state.word!.get_key()) ? \n                      this.review_word() : this.remove_word_from_review()\n                  }}>\n                {!this.review_words_keys.includes(this.state.word!.get_key()) ? \n                  \"Mark for Review\" : \"Don't Review\"}\n              </LLSplitButton>\n              <LLSplitButton \n                  theme=\"danger\" \n                  icon=\"fas fa-bullseye\" \n                  extra_class=\"btn-sm ml-2\"\n                  on_click={() => {\n                    return this.words_keys === this.props_words_keys ? \n                      this.show_review_words() : this.show_all_words()\n                  }}>\n                {this.words_keys === this.props_words_keys ? \n                  \"Show Words to Review\" : \"Show All Words\"}\n              </LLSplitButton>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-lg-12 mb-4\">\n              <LLSplitButton \n                  theme=\"info\" \n                  icon=\"fas fa-eye\" \n                  extra_class={this.state.word.get_natives().length === 0 ? \"disabled\" : \"\"}\n                  on_click={() => this.toggle_native()}>\n                {this.state.hide_native ? \"Show\" : \"Hide\"} Native Form\n              </LLSplitButton>\n            </div>\n          </div>\n          {native_section}\n\n          <div className=\"row\">\n            <div className=\"col-lg-12 mb-4\">\n              <LLSplitButton \n                  theme=\"success\" \n                  icon=\"fas fa-eye\" \n                  extra_class={this.state.word.get_pronunciations().length === 0 ? \"disabled\" : \"\"}\n                  on_click={() => this.toggle_pronunciation()}>\n                {this.state.hide_pronunciation ? \"Show\" : \"Hide\"} Pronunciation\n              </LLSplitButton>\n            </div>\n          </div>\n          {pronunciation_section}\n\n          <div className=\"row\">\n            <div className=\"col-lg-12 mb-4\">\n              <LLSplitButton \n                  theme=\"primary\" \n                  icon=\"fas fa-eye\" \n                  extra_class={this.state.word.get_examples().length === 0 ? \"disabled\" : \"\"}\n                  on_click={() => this.toggle_example()}>\n                {this.state.hide_example ? \"Show\" : \"Hide\"} Example\n              </LLSplitButton>\n            </div>\n          </div>\n          {example_section}\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <div className=\"m-2\">\n        <LLTitle><i className=\"far afa-file-word\"></i> <b>Flashcard</b></LLTitle>\n        <div className=\"row\">\n          <div className=\"col-md-2 mb-4 text-center\">\n            <LLSplitButton \n                theme=\"secondary\" \n                icon=\"fas fa-arrow-left\" \n                extra_class={btn_class}\n                on_click={() => this.previous()}>\n              Previous\n            </LLSplitButton>\n          </div>\n          <div className=\"col-md-8 mb-4 text-center\">\n            {\n              (this.index >= 0) ? \n              (this.index+1 + \" / \" + this.words_keys.length + \" (\" + \n                this.review_words_keys.length + \" to review)\") : \n              \"Total words: \" + this.words_keys.length\n            }\n          </div>\n          <div className=\"col-md-2 mb-4 text-center\">\n            <LLSplitButton \n                theme=\"secondary\" \n                icon=\"fas fa-arrow-right\" \n                extra_class={btn_class}\n                on_click={() => this.next()}>\n              Next\n            </LLSplitButton>\n          </div>\n        </div>\n        {main_page}\n      </div>\n    );\n  }\n}\n\nexport default LLFlashcard;\n","import * as React from 'react';\n\nexport interface LLNotificationProps {\n  theme: string;\n  text: string;\n  hidden: boolean;\n  button: string;\n  on_button_click: () => void;\n  on_close: () => void;\n}\nexport interface LLNotificationState {}\n \nclass LLNotification extends React.Component<LLNotificationProps, LLNotificationState> {\n  state = {}\n\n  render() {\n    if(this.props.hidden) {\n      return <React.Fragment/>\n    }\n    let button = <React.Fragment/>;\n    if(this.props.button.length > 0) {\n      button = (\n        <button className=\"btn btn-primary btn-sm float-right ml-2\" onClick={this.props.on_button_click}>\n          {this.props.button}\n        </button>\n      );\n    }\n    return (\n      <div className=\"m-2\">\n        <div className={\"alert alert-\"+this.props.theme+\" alert-dismissible fade show\"} role=\"alert\">\n          {this.props.text}\n          {button}\n          <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.props.on_close}>\n            <span>&times;</span>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LLNotification;\n","const md5_lib = require('md5');\n\nexport function md5(text: string): string {\n  return md5_lib(text);\n}\n\nexport function shuffle(array: any[]): void {\n  let current_id = array.length;\n  let tmp_val = undefined;\n  let rand_id = undefined;\n  while (0 !== current_id) {\n    rand_id = Math.floor(Math.random() * current_id);\n    current_id -= 1;\n    tmp_val = array[current_id];\n    array[current_id] = array[rand_id];\n    array[rand_id] = tmp_val;\n  }\n}\n","class LLSoundData {\n  constructor(private language: string, private sound: string) {}\n  public get_language() {\n    return this.language;\n  }\n  public get_sound() {\n    return this.sound;\n  }\n  public to_json() {\n    return {language: this.language, sound: this.sound};\n  }\n}\n\nexport default LLSoundData;\n","import LLSoundData from './SoundData';\n\nclass LLExampleData {\n  private sounds: LLSoundData[] = [];\n  constructor(private sentence: string) {}\n  public get_sentence() {\n    return this.sentence;\n  }\n  public add_sound(language: string, sound: string) {\n    this.sounds.push(new LLSoundData(language, sound));\n  }\n  public delete_sound(id: number) {\n    this.sounds.splice(id, 1);\n  }\n  public get_sounds() {\n    return this.sounds;\n  }\n  public to_json() {\n    let json: any = {};\n    json.sentence = this.sentence;\n    json.pronunciation = [];\n    this.sounds.forEach((val) => {\n      json.pronunciation.push(val.to_json());\n    });\n    return json;\n  }\n}\n\nexport default LLExampleData;\n","import LLExampleData from './ExampleData';\nimport LLSoundData from './SoundData';\nimport {md5} from '../Common';\n\nclass LLWordData {\n  private pronunciations: LLSoundData[] = [];\n  private examples: LLExampleData[] = [];\n  private natives: string[] = [];\n  private word: string;\n  private alias: string;\n  private referenced_by: LLWordData[] = [];\n  constructor(word: string, alias: string = \"\") {\n    this.word = word;\n    this.alias = alias.match(\"^\\\\w+$\") ? alias : \"\";\n  }\n  public add_pronunciation(language: string, sound: string) {\n    this.pronunciations.push(new LLSoundData(language, sound));\n  }\n  public delete_pronunciation(id: number) {\n    this.pronunciations.splice(id, 1);\n  }\n  public get_pronunciations() {\n    return this.pronunciations;\n  }\n  public add_example(example: LLExampleData) {\n    this.examples.push(example);\n  }\n  public delete_example(id: number) {\n    this.examples.splice(id, 1);\n  }\n  public get_examples() {\n    return this.examples;\n  }\n  public get_word() {\n    return this.word;\n  }\n  public get_alias() {\n    return this.alias;\n  }\n  public get_key() {\n    return md5(this.get_word());\n  }\n  public add_native(native_form: string) {\n    this.natives.push(native_form);\n  }\n  public delete_native(id: number) {\n    this.natives.splice(id, 1);\n  }\n  public get_natives() {\n    return this.natives;\n  }\n  public add_referenced_by(word: LLWordData) {\n    this.referenced_by.push(word);\n  }\n  public get_referenced_by() {\n    return this.referenced_by;\n  }\n  public static from_json(json: any) {\n    let word_data = new LLWordData(json.word, json.alias);\n    if(json.native_form) {\n      json.native_form.forEach((val: string) => {\n        word_data.add_native(val);\n      });\n    }\n    if(json.pronunciation) {\n      json.pronunciation.forEach((val: any) => {\n        word_data.add_pronunciation(val.language, val.sound);\n      });\n    }\n    if(json.example) {\n      json.example.forEach((val: any) => {\n        let example = new LLExampleData(val.sentence);\n        if(val.pronunciation) {\n          val.pronunciation.forEach((pval: any) => {\n            example.add_sound(pval.language, pval.sound);\n          });\n        }\n        word_data.add_example(example);\n      });\n    }\n    return word_data;\n  }\n  public to_json() {\n    let json : any = {};\n    json.word = this.word;\n    json.alias = this.alias;\n    json.native_form = [];\n    this.natives.forEach((val: string) => {\n      json.native_form.push(val);\n    });\n    json.example = [];\n    this.examples.forEach((val: LLExampleData) => {\n      json.example.push(val.to_json());\n    });\n    json.pronunciation = [];\n    this.pronunciations.forEach((val: LLSoundData) => {\n      json.pronunciation.push(val.to_json());\n    });\n    return json;\n  }\n  public clone() {\n    return LLWordData.from_json(this.to_json());\n  }\n}\n\nexport default LLWordData;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport LLInfo from './pages/Info';\nimport LLWord from './pages/Word';\nimport LLSearch from './pages/Search';\nimport LLFlashcard from './pages/Flashcard';\nimport LLNotification from './pages/Notification';\nimport LLWordData from './models/WordData';\nimport {shuffle} from './Common';\nimport StaticData from './db/StaticData';\n\nvar static_data = new StaticData();\nstatic_data.init_data();\n\n/**\n * Notification functions\n */\n\nfunction hide_notification() {\n  render_notification({hidden: true});\n}\n\nfunction error_notification(text: string) {\n  render_notification({theme: \"danger\", hidden: false, text: text});\n}\n\n/**\n * Event handlers\n */\n\nfunction notification_close_handler() {\n  hide_notification();\n}\n\nfunction word_select_handler(word: string) {\n  render_word_panel(word);\n}\n\nfunction flashcard_handler() {\n  render_flashcard_panel();\n}\n\nfunction flashcard_show_word_handler(key: string, callback: (word: LLWordData) => void) {\n  let word_data = static_data.get_word_by_key(key);\n  if(word_data !== null) {\n    callback(word_data);\n  } else {\n    error_notification(\"Failed to load flashcard word\");\n  }\n}\n\nfunction resolve_aliases_handler(aliases: string[]) {\n  let result: Map<string, LLWordData> = new Map();\n  aliases.forEach((alias: string) => {\n    let word_data = static_data.get_word_by_alias(alias);\n    if(word_data !== null) {\n      result.set(alias, word_data);\n    }\n  });\n  return result;\n}\n\nfunction flashcard_alias_select_handler(word: LLWordData) {\n  render_notification({\n    theme: \"warning\", \n    hidden: false, \n    text: \"Click on 'Visit Word' to exist flashcard exercise and show word '\" + word.get_word() + \"'\", \n    button: \"Visit Word\", \n    on_button_click: () => {\n      render_word_panel(word!.get_key());\n      hide_notification();\n    }\n  });\n}\n\nfunction word_from_alias_handler(alias: string) {\n  return static_data.get_word_by_alias(alias);\n}\n\n/**\n * Render functions\n */\n\nfunction render_info_panel() {\n  ReactDOM.render(<LLInfo/> ,document.getElementById('page-content'));\n}\n\nfunction render_homepage() {\n  render_logo();\n  render_search_panel();\n  render_info_panel();\n}\n\nfunction render_flashcard_panel() {\n  let words_keys = Array.from(static_data.get_words().keys());\n  shuffle(words_keys);\n  ReactDOM.render(<LLFlashcard\n    words_keys={words_keys}\n    on_alias_select={flashcard_alias_select_handler}\n    on_resolve_aliases={resolve_aliases_handler}\n    on_show_word={flashcard_show_word_handler}/> ,document.getElementById('page-content'));\n}\n\nfunction render_word_panel(word_key: string) {\n  let word_data = static_data.get_word_by_key(word_key);\n  if(word_data !== null) {\n    ReactDOM.render(<LLWord \n                        key={word_data.get_word()}\n                        word={word_data} \n                        on_resolve_aliases={resolve_aliases_handler}\n                        on_word_select={word_select_handler}\n                        word_from_alias={word_from_alias_handler}/>,\n                    document.getElementById('page-content'));\n  } else {\n    error_notification(\"Failed to load word\");\n  }\n}\n\nfunction render_search_panel() {\n  let values = Array.from(static_data.get_words().values()).sort(function (a, b) {\n    return a.get_word().toLowerCase().localeCompare(b.get_word().toLowerCase());\n  });\n  ReactDOM.render(<LLSearch \n                      words={values} \n                      on_word_select={word_select_handler} \n                      on_flashcard={flashcard_handler}/>,\n                  document.getElementById('search-panel'));\n}\n\nfunction render_logo() {\n  let make_logo = (version: string) => {\n    ReactDOM.render((\n        <div className=\"mb-3\">\n          <a className=\"sidebar-brand d-flex align-items-center justify-content-center\" href=\"#/\" onClick={() => render_info_panel()}>\n            <div className=\"sidebar-brand-icon rotate-n-15\"><i className=\"fas fa-language\"></i></div>\n            <div className=\"sidebar-brand-text mx-3\">Learn A Language</div>\n          </a>\n          <div className=\"text-center\"><small className=\"text-white\">{version}</small></div>\n        </div>\n    ), document.getElementById('logo'));\n  };\n\n  fetch('./version.txt', {headers: {'Accept': 'text/plain'}})\n  .then((r) => {\n    if(!r.ok) {\n      throw Error(r.statusText);\n    }\n    return r.text()\n  })\n  .then((text) => {\n    make_logo(text);\n  })\n  .catch((error) => {\n    make_logo(\"unknown-version\");\n  })\n}\n\nfunction render_notification(config: any) {\n  config                  = config                  || {};\n  config.theme            = config.theme            || \"warning\";\n  config.text             = config.text             || \"\";\n  config.hidden           = config.hidden           || false;\n  config.button           = config.button           || \"\";\n  config.on_button_click  = config.on_button_click  || (() => {});\n  ReactDOM.render(<LLNotification \n                        hidden={config.hidden} \n                        theme={config.theme} \n                        text={config.text} \n                        button={config.button}\n                        on_button_click={config.on_button_click}\n                        on_close={notification_close_handler}/>, \n                  document.getElementById('notification'));\n}\n\n// Render default panels\n\n(() => {\n  render_homepage();\n  serviceWorker.unregister();\n})();\n","/**\n  * THIS FILE IS AUTO-GENERATED BY LL_WORD ENGINE\n  * DO NOT MODIFY THE CONTENT OF THIS FILE\n  * BECAUSE THEY WILL BE OVERWRITTEN\n  */\nimport LLWordData from '../models/WordData';\n\nclass LLStaticData {\n  private word_key_map = new Map<string, LLWordData>();\n  private word_alias_map = new Map<string, LLWordData>();\n  get_words() {\n    return this.word_key_map;\n  }\n  get_word(word: string) {\n    let dummy = new LLWordData(word, undefined);\n    return this.get_word_by_key(dummy.get_key());\n  }\n  get_word_by_key(key: string) {\n    if(this.word_key_map.has(key)) {\n      return this.word_key_map.get(key)!;\n    }\n    return null;\n  }\n  get_word_by_alias(alias: string) {\n    if(this.word_alias_map.has(alias)) {\n      return this.word_alias_map.get(alias)!;\n    }\n    return null;\n  }\n  private add_word(word: LLWordData) {\n    this.word_key_map.set(word.get_key(), word);\n    if(word.get_alias() !== \"\") {\n      if(this.word_alias_map.has(word.get_alias())) {\n        console.warn(\"Duplicate alias\", word.get_alias());\n      }\n      this.word_alias_map.set(word.get_alias(), word);\n    }\n  }\n  private connect_words() {\n    this.word_key_map.forEach((word_1: LLWordData) => {\n      let alias = word_1.get_alias();\n      if(alias !== \"\") {\n        this.word_key_map.forEach((word_2: LLWordData) => {\n          let natives = word_2.get_natives();\n          for(let nid in natives) {\n            if((new RegExp(\".*#\"+alias+\"\\\\b.*\")).test(natives[nid])) {\n              word_1.add_referenced_by(word_2);\n              break;\n            }\n          }\n        });\n      }\n    })\n  }\n  init_data() {\n    \n      this.add_word(LLWordData.from_json({\"word\":\"Good\",\"alias\":\"good\",\"native_form\":[\"好\"],\"pronunciation\":[{\"language\":\"English\",\"sound\":\"hao\"}],\"example\":[{\"sentence\":\"I am very good\",\"pronunciation\":[{\"language\":\"English\",\"sound\":\"wo hen hao\"}]}]}));\n    \n      this.add_word(LLWordData.from_json({\"word\":\"Hello\",\"alias\":\"hello\",\"native_form\":[\"你好\",\"#you #good\"],\"pronunciation\":[{\"language\":\"French/English\",\"sound\":\"ni hao\"}],\"example\":[]}));\n    \n      this.add_word(LLWordData.from_json({\"word\":\"You\",\"alias\":\"you\",\"native_form\":[\"你\"],\"pronunciation\":[{\"language\":\"French\",\"sound\":\"ni\"}],\"example\":[]}));\n    \n    this.connect_words();\n  }\n}\n\nexport default LLStaticData;\n"],"sourceRoot":""}