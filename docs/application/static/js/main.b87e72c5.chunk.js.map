{"version":3,"sources":["serviceWorker.ts","components/Title.tsx","components/Card.tsx","index.tsx","pages/Info.tsx","components/Button.tsx","components/Form.tsx","components/Input.tsx","pages/sections/Pronunciation.tsx","pages/sections/Example.tsx","pages/sections/Native.tsx","models/SoundData.tsx","models/ExampleData.tsx","pages/Word.tsx","pages/Search.tsx","pages/Flashcard.tsx","pages/Notification.tsx","models/WordData.tsx","server/LocalServer.tsx","server/RemoteServer.tsx","Utils.tsx"],"names":["Boolean","window","location","hostname","match","LLTitle","className","this","props","children","React","LLBorderCard","iconClassName","iconTag","undefined","icon","theme","title","LLBasicCard","title_tag","color","defaultProps","server","LLInfo","state","LLSplitButton","e","on_click","preventDefault","class_val","extra_class","href","onClick","click_button","LLBasicButton","LLOkCancelForm","on_ok","ok_name","on_cancel","cancel_name","LLLabelInput","refs","input","value","label","type","ref","defaultValue","text","LLPronunciation","form_hidden","is_hidden","setState","language_input","language","sound_input","sound","on_add","set_form_hidden","id","on_delete","form","delete_btn","add_btn","read_only","add_pronunciation","delete_pronunciation","data","map","val","key","get_language","get_sound","LLExample","pronunciation_form_hidden","sentence_form_hidden","example","sentence","set_sentence_form_hidden","add_sound","on_example_update","set_pronunciation_form_hidden","example_id","sound_id","delete_sound","sentence_form","add_example","delete_example","sound_form","example_card","length","add_example_sound","delete_example_sound","get_sentence","get_sounds","LLNative","native_form","word","on_word_select","regex","md5_array","html","exec","push","slice","result","on_resolve_keys","regex_val","forEach","split","RegExp","part","startsWith","has","word_of_key","String","get","add_native","delete_native","resolve_keys","LLSoundData","LLExampleData","sounds","splice","json","pronunciation","to_json","LLWord","copy_form_hidden","on_edit","copy_word","copy","clone","set_word","on_copy_word","set_copy_form_hidden","update_word","copy_form","get_word","style","fontSize","get_md5","add_native_handler","delete_native_handler","get_natives","add_pronunciation_handler","delete_pronunciation_handler","get_pronunciations","add_example_handler","delete_example_handler","update_example_handler","get_examples","role","LLSearch","new_word_form_hidden","server_form_hidden","search_text","server_url_text","default_url","server_port_text","default_port","on_flashcard","on_demo","new_word","on_new_word","set_new_word_form_hidden","search","url_input","url","port_input","port","on_server_update","toLowerCase","s_iter","w_iter","new_word_form","server_form","set_server_form_hidden","onSubmit","onChange","on_search_change","placeholder","demo_mode","flashcard_mode","words","height","search_includes","word_select","LLFlashcard","index","hide_native","hide_pronunciation","hide_example","console","log","on_show_word","btn_class","main_page","next","native_section","pronunciation_section","example_section","show_native","show_pronunciation","show_example","previous","LLNotification","hidden","button","on_button_click","aria-label","on_close","md5","require","LLWordData","pronunciations","examples","natives","from_json","word_data","pval","LLLocalServer","Map","callback","sort","a","b","localeCompare","encode_word","delete","set","LLRemoteServer","key_map_cache","args","encodeURI","fetch","get_url","mode","then","response","success","catch","clear","method","headers","body","JSON","stringify","json_data","LLUtils","array","current_id","tmp_val","rand_id","Math","floor","random","server_url","server_port","error_notification","render_notification","success_notification","notification_close_handler","save_handler","render_search_panel","render_word_panel","delete_handler","remove_word","render_info_panel","new_word_handler","word_select_handler","word_updated_handler","save_notification","flashcard_handler","get_words","shuffle","ReactDOM","render","flashcard_word_select_handler","resolve_keys_handler","flashcard_show_word_handler","document","getElementById","demo_handler","msg","server_update_handler","connect_to_server","copy_word_handler","keys","get_word_string_from_key","is_read_only","config","s","is_ok","to_string","server_mode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b87e72c5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\n\nexport interface LLTitleProps {}\nexport interface LLTitleState {}\n \nclass LLTitle extends React.Component<LLTitleProps, LLTitleState> {\n  render() {\n    return (\n      <div className=\"d-sm-flex align-items-center justify-content-between mb-4\">\n        <h1 className=\"h3 mb-0 text-gray-800 col-lg-12\">\n          {this.props.children}\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default LLTitle;\n","import * as React from 'react';\n\n/**\n * Border Card\n */\nexport interface LLBorderCardProps {\n  title: string;\n  icon: string;\n  theme: string;\n}\nexport interface LLBorderCardState {}\nclass LLBorderCard extends React.Component<LLBorderCardProps, LLBorderCardState> {\n  render() {\n    // Update background icon\n    let iconClassName = \"fa-2x text-gray-300 \";\n    let iconTag = undefined;\n    if(this.props.icon) {\n      iconClassName += this.props.icon;\n      iconTag = <li className={iconClassName}></li>\n    }\n\n    return (\n      <div className=\"col-xl-4 col-md-6 mb-4\">\n        <div className={\"card border-left-\" + this.props.theme + \" shadow h-100 py-2\"}>\n          <div className=\"card-body\">\n            <div className=\"row no-gutters align-items-center\">\n              <div className=\"col mr-2\">\n                <div className={\"text-xs font-weight-bold text-\" + this.props.theme + \" text-uppercase mb-1\"}>{this.props.title}</div>\n                <div className=\"h5 mb-0 font-weight-bold text-gray-800\">{this.props.children}</div>\n              </div>\n              <div className=\"col-auto\">\n                {iconTag}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n/**\n * Basic Card\n */\nexport interface LLBasicCardProps {\n  title?: string;\n  color?: string;\n}\nexport interface LLBasicCardState {}\nclass LLBasicCard extends React.Component<LLBasicCardProps, LLBasicCardState> {\n  public static defaultProps = {\n    color: \"primary\"\n  };\n\n  render() {\n\n    let title_tag = undefined;\n    if(this.props.title) {\n      title_tag = (\n        <div className=\"card-header py-3\">\n          <h6 className={\"m-0 font-weight-bold text-\" + this.props.color}>{this.props.title}</h6>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"card shadow mb-4\">\n        {title_tag}\n        <div className=\"card-body\">{this.props.children}</div>\n      </div>\n    );\n  }\n}\n\nexport {\n  LLBorderCard,\n  LLBasicCard\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport LLInfo from './pages/Info';\nimport LLWord from './pages/Word';\nimport LLSearch from './pages/Search';\nimport LLFlashcard from './pages/Flashcard';\nimport LLNotification from './pages/Notification';\nimport {LLServer} from './server/Server';\nimport LLLocalServer from './server/LocalServer';\nimport LLRemoteServer from './server/RemoteServer';\nimport LLWordData from './models/WordData';\nimport LLUtils from './Utils';\n\nvar server_url = \"http://localhost\";\nvar server_port = \"3001\";\nvar server: LLServer;\n\n/**\n * Notification functions\n */\n\nfunction hide_notification() {\n  render_notification({hidden: true});\n}\n\nfunction save_notification(word: LLWordData, text: string) {\n  render_notification({\n    theme: \"warning\", \n    hidden: false, \n    text: text, \n    button: \"Save\", \n    on_button_click: () => {\n      save_handler(word)\n    }\n  });\n}\n\nfunction error_notification(text: string) {\n  render_notification({theme: \"danger\", hidden: false, text: text});\n}\n\nfunction success_notification(text: string) {\n  render_notification({theme: \"success\", hidden: false, text: text});\n}\n\nfunction warning_notification(text: string) {\n  render_notification({theme: \"warning\", hidden: false, text: text});\n}\n\n/**\n * Event handlers\n */\n\nfunction notification_close_handler() {\n  hide_notification();\n}\n\nfunction save_handler(word: LLWordData) {\n  server.set_word(word, (success: boolean) => {\n    if(success) {\n      render_search_panel();\n      render_word_panel(word.get_word());\n      success_notification(\"Word '\" + word.get_word() + \"' was saved successfully\");\n    } else {\n      error_notification(\"Failed to save '\" + word.get_word()+\"'\");\n    }\n  });\n}\n\nfunction delete_handler(word: LLWordData) {\n  server.remove_word(word.get_word(), (success: boolean) => {\n    if(success) {\n      render_search_panel();\n      render_info_panel();\n      success_notification(\"Word '\" + word.get_word() + \"' was deleted successfully\");\n    } else {\n      error_notification(\"Failed to delete '\" + word.get_word()+\"'\");\n    }\n  });\n}\n\nfunction new_word_handler(word: string) {\n  save_handler(new LLWordData(word));\n}\n\nfunction word_select_handler(word: string) {\n  render_word_panel(word);\n}\n\nfunction word_updated_handler(word: LLWordData) {\n  save_notification(word, \"Click 'Save' after done editing, or Refresh to abort the changes\");\n}\n\nfunction flashcard_handler() {\n  render_flashcard_panel();\n}\n\nfunction demo_handler() {\n  demo_mode(\"Activated Demo mode. All data will be erased upon refreshing the page.\");\n}\n\nfunction demo_mode(msg: string) {\n  server = new LLLocalServer();\n  warning_notification(msg);\n  render_search_panel();\n  render_info_panel();\n}\n\nfunction server_mode(s: LLRemoteServer) {\n  server = s;\n  success_notification(\"Successfully connected to \" + server.to_string());\n  render_search_panel();\n  render_info_panel();\n}\n\nfunction server_update_handler(url: string, port: string) {\n  connect_to_server(new LLRemoteServer(url, port))\n}\n\nfunction flashcard_show_word_handler(word: string, callback: (word: LLWordData) => void) {\n  server.get_word(word, (word_data: LLWordData | null) => {\n    if(word_data !== null) {\n      callback(word_data);\n    } else {\n      error_notification(\"Failed to load flashcard word '\" + word + \"'\");\n    }\n  });\n}\n\nfunction copy_word_handler(word: LLWordData) {\n  save_handler(word);\n}\n\nfunction resolve_keys_handler(keys: string[]) {\n  let result: Map<string, string> = new Map();\n  keys.forEach((key: string) => {\n    let word = server.get_word_string_from_key(key);\n    if(word !== null) {\n      result.set(key, String(word));\n    }\n  });\n  return result;\n}\n\nfunction flashcard_word_select_handler(word: string) {\n  render_notification({\n    theme: \"warning\", \n    hidden: false, \n    text: \"Click on 'Visit Word' to exist flashcard exercise and show word '\" + word + \"' in regular mode\", \n    button: \"Visit Word\", \n    on_button_click: () => {\n      render_word_panel(word);\n    }\n  });\n}\n\n/**\n * Render functions\n */\n\nfunction render_info_panel() {\n  ReactDOM.render(<LLInfo/> ,document.getElementById('page-content'));\n}\n\nfunction render_flashcard_panel() {\n  server.get_words((words: string[] | null) => {\n    if(words !== null) {\n      LLUtils.shuffle(words);\n      ReactDOM.render(<LLFlashcard \n        words={words} \n        on_word_select={flashcard_word_select_handler}\n        on_resolve_keys={resolve_keys_handler}\n        on_show_word={flashcard_show_word_handler}/> ,document.getElementById('page-content'));\n    } else {\n      error_notification(\"Failed to load list of words from server\");\n    }\n  });\n}\n\nfunction render_word_panel(word: string) {\n  server.get_word(word, (word_data: LLWordData | null) => {\n    if(word_data !== null) {\n      ReactDOM.render(<LLWord \n                          key={word_data.get_word()}\n                          word={word_data} \n                          read_only={server.is_read_only()}\n                          on_resolve_keys={resolve_keys_handler}\n                          on_copy_word={copy_word_handler}\n                          on_word_select={word_select_handler}\n                          on_edit={word_updated_handler}\n                          on_delete={delete_handler}/>, \n                      document.getElementById('page-content'));\n    } else {\n      error_notification(\"Failed to load word '\" + word + \"'\");\n    }\n  });\n}\n\nfunction render_search_panel() {\n  server.get_words((words: string[] | null) => {\n    if(words === null) {\n      error_notification(\"Failed to load list of words from server\");\n    }\n    ReactDOM.render(<LLSearch \n                        read_only={server.is_read_only()}\n                        default_url={server_url}\n                        default_port={server_port}\n                        words={words === null ? [] : words} \n                        on_word_select={word_select_handler} \n                        on_flashcard={flashcard_handler} \n                        on_demo={demo_handler}\n                        on_server_update={server_update_handler}\n                        on_new_word={new_word_handler}/>, \n                    document.getElementById('search-panel'));\n  });\n}\n\nfunction render_logo() {\n  ReactDOM.render((\n      <a className=\"sidebar-brand d-flex align-items-center justify-content-center\" href=\"#/\" onClick={() => render_info_panel()}>\n        <div className=\"sidebar-brand-icon rotate-n-15\"><i className=\"fas fa-language\"></i></div>\n        <div className=\"sidebar-brand-text mx-3\">Learn A Language</div>\n      </a>\n  ), document.getElementById('logo'));\n}\n\nfunction render_notification(config: any) {\n  config                  = config                  || {};\n  config.theme            = config.theme            || \"warning\";\n  config.text             = config.text             || \"\";\n  config.hidden           = config.hidden           || false;\n  config.button           = config.button           || \"\";\n  config.on_button_click  = config.on_button_click  || (() => {});\n  ReactDOM.render(<LLNotification \n                        hidden={config.hidden} \n                        theme={config.theme} \n                        text={config.text} \n                        button={config.button}\n                        on_button_click={config.on_button_click}\n                        on_close={notification_close_handler}/>, \n                  document.getElementById('notification'));\n}\n\n// Render default panels\n\nfunction connect_to_server(s: LLRemoteServer) {\n  s.is_ok((success: boolean) => {\n    if(success) {\n      server_mode(s);\n    } else {\n      demo_mode(\"Failed to connect to the server at \" + s.to_string() + \n        \". Switching to Demo mode. All data will be erased upon refreshing the page.\");\n    }\n  });\n}\n\nrender_logo();\nconnect_to_server(new LLRemoteServer(server_url, server_port));\n\nserviceWorker.unregister();\n","import * as React from 'react';\nimport LLTitle from '../components/Title';\nimport {LLBasicCard} from '../components/Card';\n\nexport interface LLInfoProps {}\nexport interface LLInfoState {}\n \nclass LLInfo extends React.Component<LLInfoProps, LLInfoState> {\n  state = {}\n\n  render() {\n    return (\n      <div className=\"m-2\">\n        <LLTitle>Welcome</LLTitle>\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <LLBasicCard>\n              <h5>Click on \"New Word\" or select an existing one</h5>\n            </LLBasicCard>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LLInfo;\n","import * as React from 'react';\n\nexport interface LLSplitButtonProps {\n  icon: string;\n  theme: string;\n  on_click: () => boolean;\n  extra_class?: string;\n}\nexport interface LLSplitButtonState {}\n\nclass LLSplitButton extends React.Component<LLSplitButtonProps, LLSplitButtonState> {\n  click_button(e: any) {\n    if(!this.props.on_click()) {\n      e.preventDefault();\n    }\n  }\n  render() {\n    let class_val = \"btn btn-\"+this.props.theme + \" btn-icon-split\";\n    if(this.props.extra_class) {\n      class_val += \" \" + this.props.extra_class;\n    }\n    return (\n      <a href=\"#/\" onClick={(e) => this.click_button(e)} className={class_val}>\n        <span className=\"icon text-white-50\">\n          <i className={this.props.icon}></i>\n        </span>\n        <span className=\"text\">\n          {this.props.children}\n        </span>\n      </a>\n    );\n  }\n}\n\nexport interface LLBasicButtonProps {\n  theme: string;\n  on_click: () => void;\n  extra_class?: string;\n}\nexport interface LLBasicButtonState {}\n\nclass LLBasicButton extends React.Component<LLBasicButtonProps, LLBasicButtonState> {\n  render() {\n    let class_val = \"btn btn-\"+this.props.theme;\n    if(this.props.extra_class) {\n      class_val += \" \" + this.props.extra_class;\n    }\n    return (\n      <button className={class_val} onClick={this.props.on_click}>\n        {this.props.children}\n      </button>\n    );\n  }\n}\n\n\nexport {LLSplitButton, LLBasicButton};\n","import * as React from 'react';\nimport {LLBasicButton} from './Button'\n\nexport interface LLOkCancelFormProps {\n  ok_name: string;\n  cancel_name: string;\n  on_ok: () => void;\n  on_cancel: () => void;\n}\nexport interface LLOkCancelFormState {}\n\nclass LLOkCancelForm extends React.Component<LLOkCancelFormProps, LLOkCancelFormState> {\n  render() {\n    return (\n      <React.Fragment>\n        {this.props.children}\n        <LLBasicButton theme=\"primary\" extra_class=\"mr-2\" on_click={this.props.on_ok}>{this.props.ok_name}</LLBasicButton>\n        <LLBasicButton theme=\"secondary\" on_click={this.props.on_cancel}>{this.props.cancel_name}</LLBasicButton>\n      </React.Fragment>\n    );\n  }\n}\n\nexport {LLOkCancelForm};\n","import * as React from 'react';\n\nexport interface LLLabelInputProps {\n  label: string;\n  text?: string;\n}\nexport interface LLLabelInputState {}\n\nclass LLLabelInput extends React.Component<LLLabelInputProps, LLLabelInputState> {\n  value() {\n    let input = this.refs.input as HTMLInputElement\n    return input.value;\n  }\n  render() {\n    return (\n      <div className=\"form-group\">\n        <label>{this.props.label}</label>\n        <input type=\"text\" className=\"form-control\" ref=\"input\" defaultValue={this.props.text}/>\n      </div>\n    );\n  }\n}\n\nexport {LLLabelInput};\n","import * as React from 'react';\nimport {LLBorderCard, LLBasicCard} from '../../components/Card';\nimport LLSoundData from '../../models/SoundData';\nimport {LLSplitButton} from '../../components/Button';\nimport {LLOkCancelForm} from '../../components/Form';\nimport {LLLabelInput} from '../../components/Input';\n\nexport interface LLPronunciationProps {\n  read_only: boolean;\n  data: LLSoundData[];\n  on_add: (language: string, sound: string) => void;\n  on_delete: (id: number) => void;\n}\nexport interface LLPronunciationState {}\nclass LLPronunciation extends React.Component<LLPronunciationProps, LLPronunciationState> {\n  state = {\n    form_hidden: true\n  }\n  set_form_hidden(is_hidden : boolean) {\n    this.setState({'form_hidden': is_hidden});\n    return false;\n  }\n  add_pronunciation() {\n    let language_input = this.refs.language as LLLabelInput;\n    let sound_input = this.refs.sound as LLLabelInput;\n    this.props.on_add(language_input.value(), sound_input.value());\n    this.set_form_hidden(true);\n  }\n  delete_pronunciation(e: any, id: number) {\n    e.preventDefault();\n    this.props.on_delete(id);\n  }\n  render() {\n    let form = undefined;\n    let delete_btn: any = () => {};\n    let add_btn = undefined;\n    if(!this.props.read_only) {\n      if(!this.state.form_hidden) {\n        form = (\n          <div className=\"row\">\n            <div className=\"col-lg-12\">\n              <LLBasicCard>\n                <LLOkCancelForm \n                    ok_name=\"Add\" \n                    cancel_name=\"Close\" \n                    on_ok={() => this.add_pronunciation()} \n                    on_cancel={() => this.set_form_hidden(true)}>\n                  <LLLabelInput ref=\"language\" label=\"Language\"/>\n                  <LLLabelInput ref=\"sound\" label=\"Sound\"/>\n                </LLOkCancelForm>\n              </LLBasicCard>\n            </div>\n          </div>\n        );\n      }\n    \n      // delete button\n      delete_btn = (id: number) => {\n        return (\n          <a href=\"#/\" onClick={(e)=>{this.delete_pronunciation(e, id)}}>\n            <div className={\"text-xs font-weight-bold text-danger text-uppercase mt-2\"}>DELETE</div>\n          </a>\n        );\n      };\n\n      // add button\n      add_btn = (\n        <div className=\"row\">\n          <div className=\"col-xl-4 col-md-6 mb-4\">\n            <LLSplitButton theme=\"success\" icon=\"fas fa-plus-square\" on_click={() => this.set_form_hidden(false)}>\n              Add Pronunciation\n            </LLSplitButton>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"row\">\n          {this.props.data.map((val, id) => {\n            return (<LLBorderCard  theme=\"success\" key={id} title={val.get_language() + \" Pronunciation\"} \n                                  icon={\"fas fa-microphone-alt\"}>\n              {val.get_sound()}\n              {delete_btn(id)}\n            </LLBorderCard>);\n          })}\n        </div>\n        {add_btn}\n        {form}\n      </div>\n    );\n  }\n}\n\nexport default LLPronunciation;\n","import * as React from 'react';\nimport {LLBasicCard} from '../../components/Card';\nimport {LLSplitButton} from '../../components/Button';\nimport {LLLabelInput} from '../../components/Input';\nimport {LLOkCancelForm} from '../../components/Form';\nimport LLExampleData from '../../models/ExampleData';\n\nexport interface LLExampleProps {\n  read_only: boolean;\n  data: LLExampleData[];\n  on_add: (sentence: string) => void;\n  on_delete: (id: number) => void;\n  on_example_update: () => void;\n}\nexport interface LLExampleState {}\nclass LLExample extends React.Component<LLExampleProps, LLExampleState> {\n  pronunciation_form_hidden: boolean[] = [];\n  state = {\n    sentence_form_hidden: true,\n    example: {}\n  }\n  set_sentence_form_hidden(is_hidden : boolean) {\n    this.setState({'sentence_form_hidden': is_hidden});\n    return false;\n  }\n  set_pronunciation_form_hidden(e : any, id: number, is_hidden : boolean) {\n    if(e !== null) {\n      e.preventDefault();\n    }\n    this.pronunciation_form_hidden[id] = is_hidden;\n    this.setState(this.state);\n  }\n  add_example() {\n    let input = this.refs.sentence as LLLabelInput\n    this.props.on_add(input.value());\n    this.set_sentence_form_hidden(true);\n    return false;\n  }\n  delete_example(e: any, id: number) {\n    e.preventDefault();\n    this.props.on_delete(id);\n  }\n  add_example_sound(id: number) {\n    let language_input = this.refs[\"language_\"+id] as LLLabelInput;\n    let sound_input = this.refs[\"sound_\"+id] as LLLabelInput;\n    this.props.data[id].add_sound(language_input.value(), sound_input.value());\n    this.props.on_example_update();\n    this.set_pronunciation_form_hidden(null, id, true);\n  }\n  delete_example_sound(e: any, example_id: number, sound_id: number) {\n    e.preventDefault();\n    this.props.data[example_id].delete_sound(sound_id);\n    this.props.on_example_update();\n  }\n  render() {\n    let sentence_form = undefined;\n    let add_example = undefined;\n    let delete_example: any = () => {};\n    let sound_form: any = () => {};\n    let add_sound: any = () => {};\n    let delete_sound: any = () => {};\n    let example_card = undefined; \n\n    if(!this.props.read_only) {\n      // example form\n      if(!this.state.sentence_form_hidden) {\n        sentence_form = (\n          <div className=\"row\">\n            <div className=\"col-lg-12\">\n              <LLBasicCard>\n                <LLOkCancelForm \n                    ok_name=\"Add\" \n                    cancel_name=\"Close\" \n                    on_ok={() => this.add_example()} \n                    on_cancel={() => this.set_sentence_form_hidden(true)}>\n                  <LLLabelInput ref=\"sentence\" label=\"Sentence\"/>\n                </LLOkCancelForm>\n              </LLBasicCard>\n            </div>\n          </div>\n        );\n      }\n\n      // sound form\n      sound_form =(id : number) => { \n        if(this.pronunciation_form_hidden[id] || id >= this.pronunciation_form_hidden.length) {\n          return <React.Fragment/>\n        }\n        return (\n          <LLOkCancelForm \n              ok_name=\"Add\" \n              cancel_name=\"Close\" \n              on_ok={() => this.add_example_sound(id)} \n              on_cancel={() => this.set_pronunciation_form_hidden(null, id, true)}>\n            <LLLabelInput ref={\"language_\"+id} label=\"Language\"/>\n            <LLLabelInput ref={\"sound_\"+id} label=\"Sound\"/>\n          </LLOkCancelForm>\n        )\n      };\n\n      // add sound button\n      add_sound = (id: number) => {\n        return (\n          <a href=\"#/\" onClick={(e) => this.set_pronunciation_form_hidden(e, id, false)}>\n            <i className=\"fas fa-plus-square\"></i> Add Pronunciation\n          </a>\n        );\n      };\n\n      // delete sound button\n      delete_sound = (example_id: number, sound_id: number) => {\n        return (\n          <a href=\"#/\" onClick={(e) => {this.delete_example_sound(e, example_id, sound_id)}}>\n            <span className=\"text-danger mr-2\">[Delete]</span>\n          </a>\n        );\n      };\n\n      // delete example button\n      delete_example = (id: number) => {\n        return (\n          <a href=\"#/\" onClick={(e)=>{this.delete_example(e, id)}}>\n            <div className={\"text-xs font-weight-bold text-danger text-uppercase mt-2\"}>DELETE EXAMPLE</div>\n          </a>\n        );\n      };\n\n      // add eample button\n      add_example = (\n        <div className=\"row\">\n          <div className=\"col-xl-4 col-md-6 mb-4\">\n            <LLSplitButton theme=\"primary\" icon=\"fas fa-plus-square\" on_click={() => this.set_sentence_form_hidden(false)}>\n              Add Example\n            </LLSplitButton>\n          </div>\n        </div>\n      );\n    }\n\n    if(this.props.data.length > 0) {\n      example_card = (\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <LLBasicCard title=\"Examples\">\n              {this.props.data.map((example, example_id) => {\n                return (\n                  <div key={example_id}>\n                    <div>{example.get_sentence()}</div>\n                    <div>{example.get_sounds().map((sound, sound_id) => {\n                      return (\n                        <div key={sound_id}>\n                          <span className=\"text-primary mr-2\">[{sound.get_language()} Pronunciation]</span>\n                          {delete_sound(example_id, sound_id)}\n                          <span>{sound.get_sound()}</span>\n                        </div>\n                      );\n                    })}</div>\n                    {add_sound(example_id)}\n                    {sound_form(example_id)}\n                    {delete_example(example_id)}\n                    <div className=\"border-top my-3\"></div>\n                  </div>\n                );\n              })}\n            </LLBasicCard>\n          </div>\n        </div>\n      );\n    }   \n\n    return (\n      <div>\n        {example_card}\n        {add_example}\n        {sentence_form}\n      </div>\n    );\n  }\n}\n\nexport default LLExample;\n","import * as React from 'react';\nimport {LLBorderCard, LLBasicCard} from '../../components/Card';\nimport {LLSplitButton} from '../../components/Button';\nimport {LLOkCancelForm} from '../../components/Form';\nimport {LLLabelInput} from '../../components/Input';\n\nexport interface LLNativeProps {\n  read_only: boolean;\n  data: string[];\n  on_add: (form : string) => void;\n  on_delete: (index: number) => void;\n  on_resolve_keys: (array: string[]) => Map<string, string>;\n  on_word_select: (word: string) => void;\n}\nexport interface LLNativeState {}\nclass LLNative extends React.Component<LLNativeProps, LLNativeState> {\n  state = {\n    form_hidden: true\n  }\n  set_form_hidden(is_hidden : boolean) {\n    this.setState({'form_hidden': is_hidden});\n    return false;\n  }\n  add_native() {\n    let input = this.refs.native_form as LLLabelInput;\n    this.props.on_add(input.value());\n    this.set_form_hidden(true);\n  }\n  delete_native(e: any, id: number) {\n    e.preventDefault();\n    this.props.on_delete(id);\n  }\n  on_word_select(e: any, word: string) {\n    e.preventDefault();\n    this.props.on_word_select(word);\n  }\n  resolve_keys(val: string) {\n    let regex = /(#\\w{32})/g;\n    let match = undefined;\n    let md5_array = [];\n    let html = <React.Fragment>{val}</React.Fragment>;\n\n    // find all keys\n    while((match = regex.exec(val))) {\n      md5_array.push(match[0].slice(1));\n    }\n    // resolve them\n    if(md5_array.length > 0) {\n      let result = this.props.on_resolve_keys(md5_array);\n      let regex_val = \"\"\n      // build regex\n      result.forEach((word: string, key: string) => {\n        if(regex_val.length !== 0) {\n          regex_val += \"|\";\n        }\n        regex_val += \"#\" + key;\n      });\n      // construct new html\n      let split = val.split(new RegExp(\"(\"+regex_val+\")\", \"g\"));\n      html = (\n        <React.Fragment>\n          {split.map((part: string, id) => {\n            let slice: string;\n            if(part.startsWith(\"#\") && result.has(slice = part.slice(1))) {\n              let word_of_key = String(result.get(slice));\n              return <a \n                  key={id} \n                  onClick={(e) => this.on_word_select(e, word_of_key)} \n                  href=\"#/\">{word_of_key}</a>\n            }\n            return <React.Fragment key={id}>{part}</React.Fragment>\n          })}\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {html}\n      </React.Fragment>\n    );\n  }\n  render() {\n    let form = undefined;\n    let delete_btn: any = () => {};\n    let add_btn = undefined;\n    if(!this.props.read_only) {\n      // form\n      if(!this.state.form_hidden) {\n        form = (\n          <div className=\"row\">\n            <div className=\"col-lg-12\">\n              <LLBasicCard>\n                <LLOkCancelForm \n                    ok_name=\"Add\" \n                    cancel_name=\"Close\" \n                    on_ok={() => this.add_native()} \n                    on_cancel={() => this.set_form_hidden(true)}>\n                  <LLLabelInput ref=\"native_form\" label=\"Native Form\"/>\n                </LLOkCancelForm>\n              </LLBasicCard>\n            </div>\n          </div>\n        );\n      }\n\n      // delete button\n      delete_btn = (id: number) => {\n        return (\n          <a href=\"#/\" onClick={(e)=>{this.delete_native(e, id)}}>\n            <div className={\"text-xs font-weight-bold text-danger text-uppercase mt-2\"}>DELETE</div>\n          </a>\n        );\n      };\n    \n      // add button\n      add_btn = (\n        <div className=\"row\">\n          <div className=\"col-xl-4 col-md-6 mb-4\">\n            <LLSplitButton theme=\"info\" icon=\"fas fa-plus-square\" on_click={() => this.set_form_hidden(false)}>\n              Add Native Form\n            </LLSplitButton>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"row\">\n          {this.props.data.map((val, id) => {\n            return (\n              <LLBorderCard  key={id} theme=\"info\" title=\"Native form\" icon=\"fas fa-language\">\n                {this.resolve_keys(val)}\n                {delete_btn(id)}\n              </LLBorderCard>\n            );\n          })}\n        </div>\n        {add_btn}\n        {form}\n      </div>\n    );\n  }\n}\n\nexport default LLNative;\n","class LLSoundData {\n  constructor(private language: string, private sound: string) {}\n  public get_language() {\n    return this.language;\n  }\n  public get_sound() {\n    return this.sound;\n  }\n  public to_json() {\n    return {language: this.language, sound: this.sound};\n  }\n}\n\nexport default LLSoundData;\n","import LLSoundData from './SoundData';\n\nclass LLExampleData {\n  private sounds: LLSoundData[] = [];\n  constructor(private sentence: string) {}\n  public get_sentence() {\n    return this.sentence;\n  }\n  public add_sound(language: string, sound: string) {\n    this.sounds.push(new LLSoundData(language, sound));\n  }\n  public delete_sound(id: number) {\n    this.sounds.splice(id, 1);\n  }\n  public get_sounds() {\n    return this.sounds;\n  }\n  public to_json() {\n    let json: any = {};\n    json.sentence = this.sentence;\n    json.pronunciation = [];\n    this.sounds.forEach((val) => {\n      json.pronunciation.push(val.to_json());\n    });\n    return json;\n  }\n}\n\nexport default LLExampleData;\n","import * as React from 'react';\n\n// Components\nimport LLTitle from '../components/Title';\nimport {LLBasicCard} from '../components/Card';\nimport {LLSplitButton} from '../components/Button';\nimport {LLOkCancelForm} from '../components/Form';\nimport {LLLabelInput} from '../components/Input';\n\n// Sections\nimport LLPronunciation from './sections/Pronunciation';\nimport LLExample from './sections/Example';\nimport LLNative from './sections/Native';\n\n// Models\nimport LLWordData from '../models/WordData';\nimport LLExampleData from '../models/ExampleData';\n\nexport interface LLWordProps {\n  read_only: boolean;\n  word: LLWordData;\n  on_delete: (word: LLWordData) => void;\n  on_edit: (word: LLWordData) => void;\n  on_copy_word: (word: LLWordData) => void;\n  on_resolve_keys: (keys: string[]) => Map<string, string>;\n  on_word_select: (word: string) => void;\n}\n \nexport interface LLWordState {}\n \nclass LLWord extends React.Component<LLWordProps, LLWordState> {\n  state = {\n    word: this.props.word,\n    copy_form_hidden: true\n  }\n\n  set_copy_form_hidden(is_hidden: boolean) {\n    this.setState({copy_form_hidden: is_hidden});\n    return false;\n  }\n\n  update_word() {\n    this.setState(this.state);\n    this.props.on_edit(this.state.word);\n  }\n\n  copy_word() {\n    let input = this.refs.copy_word as LLLabelInput;\n    let copy = this.state.word.clone();\n    copy.set_word(input.value());\n    this.props.on_copy_word(copy);\n    this.set_copy_form_hidden(true);\n  }\n\n  add_native_handler(form: string) {\n    this.state.word.add_native(form);\n    this.update_word();\n  }\n\n  delete_native_handler(id: number) {\n    this.state.word.delete_native(id);\n    this.update_word();\n  }\n\n  add_pronunciation_handler(language: string, sound: string) {\n    this.state.word.add_pronunciation(language, sound);\n    this.update_word();\n  }\n\n  delete_pronunciation_handler(id: number) {\n    this.state.word.delete_pronunciation(id);\n    this.update_word();\n  }\n\n  add_example_handler(sentence: string) {\n    let example = new LLExampleData(sentence);\n    this.state.word.add_example(example);\n    this.update_word();\n  }\n\n  delete_example_handler(id: number) {\n    this.state.word.delete_example(id);\n    this.update_word();\n  }\n\n  update_example_handler() {\n    this.update_word();\n  }\n\n  render() {\n    let copy_form = undefined;\n    if(!this.state.copy_form_hidden) {\n      copy_form = (\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <LLBasicCard>\n              <LLOkCancelForm \n                  ok_name=\"Copy\" \n                  cancel_name=\"Close\" \n                  on_ok={() => this.copy_word()} \n                  on_cancel={() => this.set_copy_form_hidden(true)}>\n                <LLLabelInput ref=\"copy_word\" label=\"Copy Word\"/>\n              </LLOkCancelForm>\n            </LLBasicCard>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"m-2\">\n        <LLTitle>\n          <div>\n            <i className=\"far fa-file-word\"></i> <b>{this.state.word.get_word()}</b>\n            <LLSplitButton \n                theme=\"secondary\" \n                extra_class=\"btn-sm float-right\"\n                icon=\"far fa-copy\" \n                on_click={() => this.set_copy_form_hidden(false)}>\n              Copy Word\n            </LLSplitButton>\n          </div>\n          <div>\n            <small style={{fontSize:15}}className=\"text-secondary\"><em>key: {this.state.word.get_md5()}</em></small>\n          </div>\n        </LLTitle>\n        {copy_form}\n        <LLNative\n              read_only={false}\n              on_add={(form) => this.add_native_handler(form)} \n              on_delete={(id) => this.delete_native_handler(id)} \n              on_resolve_keys={this.props.on_resolve_keys}\n              on_word_select={this.props.on_word_select}\n              data={this.state.word.get_natives()}/>\n        <LLPronunciation  \n              read_only={false}\n              on_add={(language, sound) => this.add_pronunciation_handler(language, sound)} \n              on_delete={(id) => this.delete_pronunciation_handler(id)} \n              data={this.state.word.get_pronunciations()}/>\n        <LLExample \n              read_only={false}\n              on_add={(sentence) => this.add_example_handler(sentence)}\n              on_delete={(id) => this.delete_example_handler(id)}\n              on_example_update={() => this.update_example_handler()}\n              data={this.state.word.get_examples()}/>\n        <div className=\"alert alert-warning\" role=\"alert\">\n          Click \"Delete\" to remove the word\n          <button className=\"btn btn-danger btn-sm float-right ml-2\" onClick={() => {this.props.on_delete(this.state.word)}}>Delete</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LLWord;\n","import * as React from 'react';\nimport {LLOkCancelForm} from '../components/Form';\nimport {LLLabelInput} from '../components/Input';\n\nexport interface LLSearchProps {\n  read_only: boolean;\n  default_url: string;\n  default_port: string;\n  on_word_select: (word: string) => void;\n  on_new_word: (word: string) => void;\n  on_flashcard: () => void;\n  on_demo: () => void;\n  on_server_update: (url: string, port: string) => void;\n  words: string[];\n}\n \nexport interface LLSearchState {}\n \nclass LLSearch extends React.Component<LLSearchProps, LLSearchState> {\n  state = {\n    new_word_form_hidden: true,\n    server_form_hidden: true,\n    search_text: \"\",\n    server_url_text: this.props.default_url,\n    server_port_text: this.props.default_port\n  }\n\n  set_new_word_form_hidden(e: any, is_hidden : boolean) {\n    if(e !== null) {\n      e.preventDefault();\n    }\n    this.setState({'new_word_form_hidden': is_hidden});\n  }\n\n  set_server_form_hidden(e: any, is_hidden : boolean) {\n    if(e !== null) {\n      e.preventDefault();\n    }\n    this.setState({'server_form_hidden': is_hidden});\n  }\n  \n  flashcard_mode(e: any) {\n    e.preventDefault();\n    this.props.on_flashcard();\n  }\n\n  demo_mode(e: any) {\n    e.preventDefault();\n    this.props.on_demo();\n  }\n\n  word_select(e: any, word: string) {\n    e.preventDefault();\n    this.props.on_word_select(word);\n  }\n\n  on_new_word() {\n    let input = this.refs.new_word as LLLabelInput;\n    this.props.on_new_word(input.value());\n    this.set_new_word_form_hidden(null, true);\n  }\n\n  on_search_change() {\n    let input = this.refs.search as HTMLInputElement;\n    this.setState({search_text: input.value});\n  }\n\n  on_server_update() {\n    let url_input = this.refs.url as LLLabelInput;\n    let port_input = this.refs.port as LLLabelInput;\n    this.setState({\n      server_url_text: url_input.value(),\n      server_port_text: port_input.value()\n    });\n    this.props.on_server_update(url_input.value(), port_input.value());\n  }\n\n  search_includes(word: string) {\n    let search_text = this.state.search_text;\n    if(search_text.length > word.length) {\n      return false;\n    }\n\n    // Ignore case sensitivity\n    search_text = search_text.toLowerCase();\n    word = word.toLowerCase();\n\n    // Letters in the search field must exist\n    // in the target 'word' and in the same order\n    let s_iter = 0;\n    let w_iter = 0;\n    while(s_iter < search_text.length && w_iter < word.length) {\n      if(search_text[s_iter] === word[w_iter]) {\n        s_iter++;\n      }\n      w_iter++;\n    }\n    return s_iter === search_text.length;\n  }\n\n  render() { \n    let new_word_form = undefined;\n    if(!this.state.new_word_form_hidden) {\n      new_word_form = (\n        <div className=\"small col-md-12 text-white\">\n          <LLOkCancelForm \n              ok_name=\"Add\" \n              cancel_name=\"Close\" \n              on_ok={() => this.on_new_word()} \n              on_cancel={() => this.set_new_word_form_hidden(null, true)}>\n            <LLLabelInput ref=\"new_word\" label=\"Word\"/>\n          </LLOkCancelForm>\n        </div>\n      );\n    }\n\n    let server_form = undefined;\n    if(!this.state.server_form_hidden) {\n      server_form = (\n        <div className=\"small col-md-12 text-white\">\n          <LLOkCancelForm \n              ok_name=\"Update\" \n              cancel_name=\"Close\" \n              on_ok={() => this.on_server_update()} \n              on_cancel={() => this.set_server_form_hidden(null, true)}>\n            <LLLabelInput ref=\"url\" label=\"URL\" text={this.state.server_url_text}/>\n            <LLLabelInput ref=\"port\" label=\"Port\" text={this.state.server_port_text}/>\n          </LLOkCancelForm>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <form \n            className=\"d-none d-sm-inline-block form-inline mr-md-3 ml-md-3 my-2 my-md-0 mw-100 navbar-search\"\n            onSubmit={(e) => e.preventDefault()}>\n          <div className=\"input-group\">\n            <input  \n                type=\"text\" \n                ref=\"search\" \n                value={this.state.search_text}\n                className=\"form-control bg-light border-0 small\" \n                onChange={() => this.on_search_change()} \n                placeholder=\"Search for a word\"/>\n            <div className=\"input-group-append\">\n              <button className=\"btn btn-warning\">\n                <i className=\"fas fa-search fa-sm\"></i>\n              </button>\n            </div>\n          </div>\n        </form>\n\n        <hr className=\"sidebar-divider my-0\" />\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"#/\" onClick={(e) => {this.demo_mode(e)}}>\n            <i className=\"fas fa-database\"></i> Demo mode\n          </a>\n        </li>\n\n        <hr className=\"sidebar-divider my-0\" />\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"#/\" onClick={(e) => {this.set_server_form_hidden(e, false)}}>\n            <i className=\"fas fa-server\"></i> Server\n          </a>\n        </li>\n        {server_form}\n\n        <hr className=\"sidebar-divider my-0\" />\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"#/\" onClick={(e) => {this.flashcard_mode(e)}}>\n            <i className=\"fas fa-comment-alt\"></i> Flashcard <small><em>({this.props.words.length})</em></small>\n          </a>\n        </li>\n\n        <hr className=\"sidebar-divider my-0\" />\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"#/\" onClick={(e) => {this.set_new_word_form_hidden(e, false)}}>\n            <i className=\"fas fa-plus-square\"></i> New Word\n          </a>\n        </li>\n        {new_word_form}\n\n        <hr className=\"sidebar-divider my-0\" />\n        <div style={{height: \"350px\"}}>\n          <div className=\"overflow-auto h-100 d-inline-block\">\n            {this.props.words.map((word, id) => {\n              return (\n                <React.Fragment key={id}>\n                  {this.search_includes(word) ? (\n                    <li className=\"nav-item\">\n                      <a className=\"nav-link\" href=\"#/\" onClick={(e) => {this.word_select(e, word)}}>{word}</a>\n                    </li>\n                  ) : undefined}\n                </React.Fragment>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default LLSearch;\n","import * as React from 'react';\nimport LLTitle from '../components/Title';\nimport LLWordData from '../models/WordData';\nimport {LLBasicCard} from '../components/Card';\nimport {LLSplitButton} from '../components/Button';\nimport LLPronunciation from './sections/Pronunciation';\nimport LLExample from './sections/Example';\nimport LLNative from './sections/Native';\n\nexport interface LLFlashcardProps {\n  words: string[];\n  on_show_word: (word: string, callback: (word: LLWordData) => void) => void;\n  on_resolve_keys: (keys: string[]) => Map<string, string>;\n  on_word_select: (word: string) => void;\n}\nexport interface LLFlashcardState {}\n \nclass LLFlashcard extends React.Component<LLFlashcardProps, LLFlashcardState> {\n  index: number = -1;\n  state: {\n    word: LLWordData | null;\n    hide_native: boolean;\n    hide_pronunciation: boolean;\n    hide_example: boolean;\n  } = {\n    word: null,\n    hide_native: true,\n    hide_pronunciation: true,\n    hide_example: true\n  }\n\n  new_word(word: LLWordData) {\n    this.setState({\n      word: word,\n      hide_native: true,\n      hide_pronunciation: true,\n      hide_example: true\n    });\n  }\n\n  next() {\n    if(this.props.words.length > 0) {\n      this.index = (this.index + 1) % this.props.words.length;\n      console.log(this.index);\n      this.props.on_show_word(this.props.words[this.index], (word: LLWordData) => {\n        this.new_word(word);\n      });\n    }\n    return false;\n  }\n\n  previous() {\n    if(this.props.words.length > 0) {\n      this.index = (this.index + (this.props.words.length - 1)) % this.props.words.length;\n      console.log(this.index);\n      this.props.on_show_word(this.props.words[this.index], (word: LLWordData) => {\n        this.new_word(word);\n      });\n    }\n    return false;\n  }\n\n  show_native() {\n    this.setState({hide_native: false});\n    return false;\n  }\n\n  show_pronunciation() {\n    this.setState({hide_pronunciation: false});\n    return false;\n  }\n  \n  show_example() {\n    this.setState({hide_example: false});\n    return false;\n  }\n\n  render() {\n    let btn_class = \"\";\n    let main_page = undefined;\n    if(this.state.word === null) {\n      btn_class = \"disabled\";\n      main_page = (\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <LLBasicCard>\n              <div className=\"col-xl-12 col-md-12 mb-4 text-center\">\n                <div className=\"mb-4\">Click \"Start\" to begin the Flashcard exercise</div>\n                <LLSplitButton theme=\"secondary\" icon=\"fas fa-play\" on_click={() => this.next()}>\n                  Start\n                </LLSplitButton>\n              </div>\n            </LLBasicCard>\n          </div>\n        </div>\n      );\n    } else {\n\n      let native_section = undefined;\n      let pronunciation_section = undefined;\n      let example_section = undefined;\n      if(!this.state.hide_native) {\n        native_section = (\n          <LLNative\n                read_only={true}\n                on_resolve_keys={this.props.on_resolve_keys}\n                on_add={() => {}} \n                on_delete={() => {}} \n                on_word_select={this.props.on_word_select}\n                data={this.state.word.get_natives()}/>\n        );\n      }\n\n      if(!this.state.hide_pronunciation) {\n        pronunciation_section = (\n          <LLPronunciation  \n                read_only={true}\n                on_add={() => {}} \n                on_delete={() => {}} \n                data={this.state.word.get_pronunciations()}/>\n        ); \n      }\n\n      if(!this.state.hide_example) {\n        example_section = (\n          <LLExample \n                read_only={true}\n                on_add={() => {}}\n                on_delete={() => {}}\n                on_example_update={() => {}}\n                data={this.state.word.get_examples()}/>\n        );\n      }\n\n      main_page = (\n        <React.Fragment>\n          <LLTitle><i className=\"far fa-file-word\"></i> <b>{this.state.word.get_word()}</b></LLTitle>\n          <div className=\"row\">\n            <div className=\"col-lg-12 mb-4\">\n              <LLSplitButton \n                  theme=\"info\" \n                  icon=\"fas fa-eye\" \n                  extra_class={this.state.word.get_natives().length === 0 ? \"disabled\" : \"\"}\n                  on_click={() => this.show_native()}>\n                Show Native Form\n              </LLSplitButton>\n            </div>\n          </div>\n          {native_section}\n\n          <div className=\"row\">\n            <div className=\"col-lg-12 mb-4\">\n              <LLSplitButton \n                  theme=\"success\" \n                  icon=\"fas fa-eye\" \n                  extra_class={this.state.word.get_pronunciations().length === 0 ? \"disabled\" : \"\"}\n                  on_click={() => this.show_pronunciation()}>\n                Show Pronunciation\n              </LLSplitButton>\n            </div>\n          </div>\n          {pronunciation_section}\n\n          <div className=\"row\">\n            <div className=\"col-lg-12 mb-4\">\n              <LLSplitButton \n                  theme=\"primary\" \n                  icon=\"fas fa-eye\" \n                  extra_class={this.state.word.get_examples().length === 0 ? \"disabled\" : \"\"}\n                  on_click={() => this.show_example()}>\n                Show Example\n              </LLSplitButton>\n            </div>\n          </div>\n          {example_section}\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <div className=\"m-2\">\n        <LLTitle><i className=\"far afa-file-word\"></i> <b>Flashcard</b></LLTitle>\n        <div className=\"row\">\n          <div className=\"col-md-4 mb-4\">\n            <LLSplitButton \n                theme=\"secondary\" \n                icon=\"fas fa-arrow-left\" \n                extra_class={btn_class}\n                on_click={() => this.previous()}>\n              Previous\n            </LLSplitButton>\n          </div>\n          <div className=\"col-md-4 mb-4 text-center\">\n            {(this.index >= 0) ? (this.index+1 + \" / \" + this.props.words.length) : \"Total words: \" + this.props.words.length}\n          </div>\n          <div className=\"col-md-4 mb-4 text-right\">\n            <LLSplitButton \n                theme=\"secondary\" \n                icon=\"fas fa-arrow-right\" \n                extra_class={btn_class}\n                on_click={() => this.next()}>\n              Next\n            </LLSplitButton>\n          </div>\n        </div>\n        {main_page}\n      </div>\n    );\n  }\n}\n\nexport default LLFlashcard;\n","import * as React from 'react';\n\nexport interface LLNotificationProps {\n  theme: string;\n  text: string;\n  hidden: boolean;\n  button: string;\n  on_button_click: () => void;\n  on_close: () => void;\n}\nexport interface LLNotificationState {}\n \nclass LLNotification extends React.Component<LLNotificationProps, LLNotificationState> {\n  state = {}\n\n  render() {\n    if(this.props.hidden) {\n      return <React.Fragment/>\n    }\n    let button = <React.Fragment/>;\n    if(this.props.button.length > 0) {\n      button = (\n        <button className=\"btn btn-primary btn-sm float-right ml-2\" onClick={this.props.on_button_click}>\n          {this.props.button}\n        </button>\n      );\n    }\n    return (\n      <div className=\"m-2\">\n        <div className={\"alert alert-\"+this.props.theme+\" alert-dismissible fade show\"} role=\"alert\">\n          {this.props.text}\n          {button}\n          <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.props.on_close}>\n            <span>&times;</span>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LLNotification;\n","import LLExampleData from './ExampleData';\nimport LLSoundData from './SoundData';\nconst md5 = require(\"md5\");\n\nclass LLWordData {\n  private pronunciations: LLSoundData[] = [];\n  private examples: LLExampleData[] = [];\n  private natives: string[] = [];\n  constructor(private word: string) {}\n  public add_pronunciation(language: string, sound: string) {\n    this.pronunciations.push(new LLSoundData(language, sound));\n  }\n  public delete_pronunciation(id: number) {\n    this.pronunciations.splice(id, 1);\n  }\n  public get_pronunciations() {\n    return this.pronunciations;\n  }\n  public add_example(example: LLExampleData) {\n    this.examples.push(example);\n  }\n  public delete_example(id: number) {\n    this.examples.splice(id, 1);\n  }\n  public get_examples() {\n    return this.examples;\n  }\n  public get_word() {\n    return this.word;\n  }\n  public set_word(word: string) {\n    this.word = word;\n  }\n  public get_md5() {\n    return md5(this.get_word());\n  }\n  public add_native(native_form: string) {\n    this.natives.push(native_form);\n  }\n  public delete_native(id: number) {\n    this.natives.splice(id, 1);\n  }\n  public get_natives() {\n    return this.natives;\n  }\n  public static from_json(json: any) {\n    let word_data = new LLWordData(json.word);\n\n    json.native_form.forEach((val: string) => {\n      word_data.add_native(val);\n    });\n    json.pronunciation.forEach((val: any) => {\n      word_data.add_pronunciation(val.language, val.sound);\n    });\n    json.example.forEach((val: any) => {\n      let example = new LLExampleData(val.sentence);\n      val.pronunciation.forEach((pval: any) => {\n        example.add_sound(pval.language, pval.sound);\n      });\n      word_data.add_example(example);\n    });\n    \n    return word_data;\n  }\n  public to_json() {\n    let json : any = {};\n    json.word = this.word;\n    json.native_form = [];\n    this.natives.forEach((val: string) => {\n      json.native_form.push(val);\n    });\n    json.example = [];\n    this.examples.forEach((val: LLExampleData) => {\n      json.example.push(val.to_json());\n    });\n    json.pronunciation = [];\n    this.pronunciations.forEach((val: LLSoundData) => {\n      json.pronunciation.push(val.to_json());\n    });\n    return json;\n  }\n  public clone() {\n    return LLWordData.from_json(this.to_json());\n  }\n}\n\nexport default LLWordData;\n","import LLWordData from '../models/WordData';\nimport {LLServer} from './Server';\n\nclass LLLocalServer implements LLServer {\n  private data: Map<string, LLWordData> = new Map();\n  is_read_only() {\n    return false;\n  }\n  is_ok(callback: (success: boolean) => void) {\n    callback(true);\n  }\n  get_words(callback: (words: string[] | null) => void) {\n    let result: string[] = [];\n    this.data.forEach((word: LLWordData, key: string) => {\n      result.push(word.get_word());\n    });\n    result.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n    callback(result);\n  }\n  get_word(word: string, callback: (word: LLWordData | null) => void) {\n    let encode_word = new LLWordData(word).get_md5();\n    if(this.data.has(encode_word)) {\n      callback(this.data.get(encode_word)!.clone());\n    } else {\n      callback(null);\n    }\n  }\n  get_word_string_from_key(key: string): string | null {\n    return this.data.has(key) ? this.data.get(key)!.get_word() : null;\n  }\n  remove_word(word: string, callback: (success: boolean) => void): void {\n    let encode_word = new LLWordData(word).get_md5();\n    if(this.data.has(encode_word)) {\n      this.data.delete(encode_word);\n      callback(true);\n    } else {\n      callback(false);\n    }\n  }\n  set_word(word: LLWordData, callback: (success: boolean) => void): void {\n    this.data.set(word.get_md5(), word);\n    callback(true);\n  }\n  to_string() {\n    return \"Local Storage\";\n  }\n}\n\nexport default LLLocalServer;\n","import LLWordData from '../models/WordData';\nimport {LLServer} from './Server';\n\nclass LLRemoteServer implements LLServer {\n  constructor(private url: string, private port: string) {}\n  private key_map_cache: Map<string, string> = new Map();\n  get_url(...args: string[]) {\n    let url = this.url + \":\" + this.port;\n    args.forEach((val) => {\n      url += \"/\" + encodeURI(val);\n    });\n    return url;\n  }\n  is_read_only() {\n    return false;\n  }\n  is_ok(callback: (success: boolean) => void) {\n    fetch(this.get_url('ok'), {mode: 'cors'})\n    .then(response => response.json())\n    .then((json) => {\n      callback(json.success || false);\n    })\n    .catch(() => {\n      callback(false);\n    });\n  }\n  get_words(callback: (words: (string[] | null)) => void) {\n    fetch(this.get_url('words'), {mode: 'cors'})\n    .then(response => response.json())\n    .then((json) => {\n      this.key_map_cache.clear();\n      json.words.forEach((word: string) => {\n        this.key_map_cache.set(new LLWordData(word).get_md5(), word);\n      });\n      callback(json.words);\n    })\n    .catch(() => {\n      callback(null);\n    });\n  }\n  get_word(word: string, callback: (word: LLWordData | null) => void) {\n    fetch(this.get_url('word', 'view', word), {mode: 'cors'})\n    .then(response => response.json())\n    .then((json) => {\n      callback(LLWordData.from_json(json));\n    }).catch(() => {\n      callback(null);\n    });\n  }\n  get_word_string_from_key(key: string): string | null {\n    if(this.key_map_cache.has(key)) {\n      return this.key_map_cache.get(key)!;\n    }\n    return null;\n  }\n  remove_word(word: string, callback: (success: boolean) => void) {\n    fetch(this.get_url('word', 'remove', word), {mode: 'cors'})\n    .then(response => response.json())\n    .then((json) => {\n      callback(json.success);\n    }).catch(() => {\n      callback(false);\n    });\n  }\n  set_word(word: LLWordData, callback: (success: boolean) => void) {\n    fetch(this.get_url('word','set'), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        word: word.get_word(),\n        json_data: JSON.stringify(word.to_json()),\n      })\n    })\n    .then(response => response.json())\n    .then((json) => {\n      callback(json.success);\n    }).catch(() => {\n      callback(false);\n    });\n  }\n  to_string() {\n    return \"URL: \" + this.url + \" and Port: \" + this.port;\n  }\n}\n\nexport default LLRemoteServer;\n","class LLUtils {\n\n  static shuffle(array: string[]) {\n    let current_id = array.length;\n    let tmp_val = undefined;\n    let rand_id = undefined;\n    while (0 !== current_id) {\n      rand_id = Math.floor(Math.random() * current_id);\n      current_id -= 1;\n      tmp_val = array[current_id];\n      array[current_id] = array[rand_id];\n      array[rand_id] = tmp_val;\n    }\n  }\n}\n\nexport default LLUtils;\n"],"sourceRoot":""}