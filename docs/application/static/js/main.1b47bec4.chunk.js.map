{"version":3,"sources":["serviceWorker.ts","components/Title.tsx","components/Card.tsx","pages/Info.tsx","components/Button.tsx","components/Form.tsx","components/Input.tsx","pages/sections/Pronunciation.tsx","pages/sections/Example.tsx","pages/sections/Native.tsx","models/SoundData.tsx","models/ExampleData.tsx","pages/Word.tsx","pages/Search.tsx","pages/Flashcard.tsx","pages/Notification.tsx","Common.tsx","models/WordData.tsx","data/StaticData.tsx","server/RemoteServer.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","LLTitle","className","this","props","children","React","LLBorderCard","iconClassName","iconTag","undefined","icon","theme","title","LLBasicCard","title_tag","color","defaultProps","LLInfo","state","LLSplitButton","e","on_click","preventDefault","class_val","extra_class","href","onClick","click_button","LLBasicButton","LLOkCancelForm","on_ok","ok_name","on_cancel","cancel_name","LLLabelInput","refs","input","value","label","type","ref","defaultValue","text","LLPronunciation","form_hidden","is_hidden","setState","language_input","language","sound_input","sound","on_add","set_form_hidden","id","on_delete","form","delete_btn","add_btn","read_only","add_pronunciation","delete_pronunciation","data","map","val","key","get_language","get_sound","LLExample","pronunciation_form_hidden","sentence_form_hidden","example","sentence","set_sentence_form_hidden","add_sound","on_example_update","set_pronunciation_form_hidden","example_id","sound_id","delete_sound","sentence_form","add_example","delete_example","sound_form","example_card","length","add_example_sound","delete_example_sound","get_sentence","get_sounds","LLNative","native_form","word","on_word_select","regex","md5_array","html","exec","push","slice","result","on_resolve_keys","regex_val","forEach","split","RegExp","part","startsWith","has","word_of_key","String","get","add_native","delete_native","resolve_keys","LLSoundData","LLExampleData","sounds","splice","json","pronunciation","to_json","LLWord","clone","copy_form_hidden","on_undo","on_edit","copy_word","copy","set_word","on_copy_word","set_copy_form_hidden","update_word","copy_form","copy_button","undo_button","delete_button","undo_changes","role","get_word","style","fontSize","get_md5","add_native_handler","delete_native_handler","get_natives","add_pronunciation_handler","delete_pronunciation_handler","get_pronunciations","add_example_handler","delete_example_handler","update_example_handler","get_examples","LLSearch","new_word_form_hidden","server_form_hidden","search_text","server_url_text","server_port_text","on_flashcard","new_word","on_new_word","set_new_word_form_hidden","search","url_input","url","port_input","port","on_server_update","word_data","toLowerCase","s_iter","w_iter","new_word_form","new_word_button","server_form","set_server_form_hidden","onSubmit","onChange","on_search_change","placeholder","flashcard_mode","words","height","search_includes","word_select","LLFlashcard","index","hide_native","hide_pronunciation","hide_example","words_keys","console","log","on_show_word","btn_class","main_page","next","native_section","pronunciation_section","example_section","show_native","show_pronunciation","show_example","previous","LLNotification","hidden","button","on_button_click","aria-label","on_close","md5_lib","require","md5","LLWordData","pronunciations","examples","natives","from_json","pval","LLStaticData","Map","get_word_by_key","set","add_word","LLRemoteServer","static_data","last_connected_check","init_data","args","encodeURI","get_words","get_url","get_port","callback","valid_url","fetch","make_url","mode","then","response","success","catch","method","headers","body","JSON","stringify","json_data","success_val","server","error_notification","render_notification","success_notification","notification_close_handler","save_handler","render_search_panel","render_word_panel","delete_handler","remove_word","render_homepage","new_word_handler","word_select_handler","word_updated_handler","save_notification","word_reverted_handler","flashcard_handler","Array","from","keys","array","current_id","tmp_val","rand_id","Math","floor","random","shuffle","ReactDOM","render","flashcard_word_select_handler","resolve_keys_handler","flashcard_show_word_handler","document","getElementById","render_flashcard_panel","server_update_handler","is_ok","was_ok","to_string","connect_to_server","copy_word_handler","render_info_panel","values","config","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b47bec4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\n\nexport interface LLTitleProps {}\nexport interface LLTitleState {}\n \nclass LLTitle extends React.Component<LLTitleProps, LLTitleState> {\n  render() {\n    return (\n      <div className=\"d-sm-flex align-items-center justify-content-between mb-4\">\n        <h1 className=\"h3 mb-0 text-gray-800 col-lg-12\">\n          {this.props.children}\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default LLTitle;\n","import * as React from 'react';\n\n/**\n * Border Card\n */\nexport interface LLBorderCardProps {\n  title: string;\n  icon: string;\n  theme: string;\n}\nexport interface LLBorderCardState {}\nclass LLBorderCard extends React.Component<LLBorderCardProps, LLBorderCardState> {\n  render() {\n    // Update background icon\n    let iconClassName = \"fa-2x text-gray-300 \";\n    let iconTag = undefined;\n    if(this.props.icon) {\n      iconClassName += this.props.icon;\n      iconTag = <li className={iconClassName}></li>\n    }\n\n    return (\n      <div className=\"col-xl-4 col-md-6 mb-4\">\n        <div className={\"card border-left-\" + this.props.theme + \" shadow h-100 py-2\"}>\n          <div className=\"card-body\">\n            <div className=\"row no-gutters align-items-center\">\n              <div className=\"col mr-2\">\n                <div className={\"text-xs font-weight-bold text-\" + this.props.theme + \" text-uppercase mb-1\"}>{this.props.title}</div>\n                <div className=\"h5 mb-0 font-weight-bold text-gray-800\">{this.props.children}</div>\n              </div>\n              <div className=\"col-auto\">\n                {iconTag}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n/**\n * Basic Card\n */\nexport interface LLBasicCardProps {\n  title?: string;\n  color?: string;\n}\nexport interface LLBasicCardState {}\nclass LLBasicCard extends React.Component<LLBasicCardProps, LLBasicCardState> {\n  public static defaultProps = {\n    color: \"primary\"\n  };\n\n  render() {\n\n    let title_tag = undefined;\n    if(this.props.title) {\n      title_tag = (\n        <div className=\"card-header py-3\">\n          <h6 className={\"m-0 font-weight-bold text-\" + this.props.color}>{this.props.title}</h6>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"card shadow mb-4\">\n        {title_tag}\n        <div className=\"card-body\">{this.props.children}</div>\n      </div>\n    );\n  }\n}\n\nexport {\n  LLBorderCard,\n  LLBasicCard\n};\n","import * as React from 'react';\nimport LLTitle from '../components/Title';\nimport {LLBasicCard} from '../components/Card';\n\nexport interface LLInfoProps {}\nexport interface LLInfoState {}\n \nclass LLInfo extends React.Component<LLInfoProps, LLInfoState> {\n  state = {}\n\n  render() {\n    return (\n      <div className=\"m-2\">\n        <LLTitle>Welcome</LLTitle>\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <LLBasicCard>\n              <h5>Click on \"New Word\" or select an existing one</h5>\n            </LLBasicCard>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LLInfo;\n","import * as React from 'react';\n\nexport interface LLSplitButtonProps {\n  icon: string;\n  theme: string;\n  on_click: () => boolean;\n  extra_class?: string;\n}\nexport interface LLSplitButtonState {}\n\nclass LLSplitButton extends React.Component<LLSplitButtonProps, LLSplitButtonState> {\n  click_button(e: any) {\n    if(!this.props.on_click()) {\n      e.preventDefault();\n    }\n  }\n  render() {\n    let class_val = \"btn btn-\"+this.props.theme + \" btn-icon-split\";\n    if(this.props.extra_class) {\n      class_val += \" \" + this.props.extra_class;\n    }\n    return (\n      <a href=\"#/\" onClick={(e) => this.click_button(e)} className={class_val}>\n        <span className=\"icon text-white-50\">\n          <i className={this.props.icon}></i>\n        </span>\n        <span className=\"text\">\n          {this.props.children}\n        </span>\n      </a>\n    );\n  }\n}\n\nexport interface LLBasicButtonProps {\n  theme: string;\n  on_click: () => void;\n  extra_class?: string;\n}\nexport interface LLBasicButtonState {}\n\nclass LLBasicButton extends React.Component<LLBasicButtonProps, LLBasicButtonState> {\n  render() {\n    let class_val = \"btn btn-\"+this.props.theme;\n    if(this.props.extra_class) {\n      class_val += \" \" + this.props.extra_class;\n    }\n    return (\n      <button className={class_val} onClick={this.props.on_click}>\n        {this.props.children}\n      </button>\n    );\n  }\n}\n\n\nexport {LLSplitButton, LLBasicButton};\n","import * as React from 'react';\nimport {LLBasicButton} from './Button'\n\nexport interface LLOkCancelFormProps {\n  ok_name: string;\n  cancel_name: string;\n  on_ok: () => void;\n  on_cancel: () => void;\n}\nexport interface LLOkCancelFormState {}\n\nclass LLOkCancelForm extends React.Component<LLOkCancelFormProps, LLOkCancelFormState> {\n  render() {\n    return (\n      <React.Fragment>\n        {this.props.children}\n        <LLBasicButton theme=\"primary\" extra_class=\"mr-2\" on_click={this.props.on_ok}>{this.props.ok_name}</LLBasicButton>\n        <LLBasicButton theme=\"secondary\" on_click={this.props.on_cancel}>{this.props.cancel_name}</LLBasicButton>\n      </React.Fragment>\n    );\n  }\n}\n\nexport {LLOkCancelForm};\n","import * as React from 'react';\n\nexport interface LLLabelInputProps {\n  label: string;\n  text?: string;\n}\nexport interface LLLabelInputState {}\n\nclass LLLabelInput extends React.Component<LLLabelInputProps, LLLabelInputState> {\n  value() {\n    let input = this.refs.input as HTMLInputElement\n    return input.value;\n  }\n  render() {\n    return (\n      <div className=\"form-group\">\n        <label>{this.props.label}</label>\n        <input type=\"text\" className=\"form-control\" ref=\"input\" defaultValue={this.props.text}/>\n      </div>\n    );\n  }\n}\n\nexport {LLLabelInput};\n","import * as React from 'react';\nimport {LLBorderCard, LLBasicCard} from '../../components/Card';\nimport LLSoundData from '../../models/SoundData';\nimport {LLSplitButton} from '../../components/Button';\nimport {LLOkCancelForm} from '../../components/Form';\nimport {LLLabelInput} from '../../components/Input';\n\nexport interface LLPronunciationProps {\n  read_only: boolean;\n  data: LLSoundData[];\n  on_add: (language: string, sound: string) => void;\n  on_delete: (id: number) => void;\n}\nexport interface LLPronunciationState {}\nclass LLPronunciation extends React.Component<LLPronunciationProps, LLPronunciationState> {\n  state = {\n    form_hidden: true\n  }\n  set_form_hidden(is_hidden : boolean) {\n    this.setState({'form_hidden': is_hidden});\n    return false;\n  }\n  add_pronunciation() {\n    let language_input = this.refs.language as LLLabelInput;\n    let sound_input = this.refs.sound as LLLabelInput;\n    this.props.on_add(language_input.value(), sound_input.value());\n    this.set_form_hidden(true);\n  }\n  delete_pronunciation(e: any, id: number) {\n    e.preventDefault();\n    this.props.on_delete(id);\n  }\n  render() {\n    let form = undefined;\n    let delete_btn: any = () => {};\n    let add_btn = undefined;\n    if(!this.props.read_only) {\n      if(!this.state.form_hidden) {\n        form = (\n          <div className=\"row\">\n            <div className=\"col-lg-12\">\n              <LLBasicCard>\n                <LLOkCancelForm \n                    ok_name=\"Add\" \n                    cancel_name=\"Close\" \n                    on_ok={() => this.add_pronunciation()} \n                    on_cancel={() => this.set_form_hidden(true)}>\n                  <LLLabelInput ref=\"language\" label=\"Language\"/>\n                  <LLLabelInput ref=\"sound\" label=\"Sound\"/>\n                </LLOkCancelForm>\n              </LLBasicCard>\n            </div>\n          </div>\n        );\n      }\n    \n      // delete button\n      delete_btn = (id: number) => {\n        return (\n          <a href=\"#/\" onClick={(e)=>{this.delete_pronunciation(e, id)}}>\n            <div className={\"text-xs font-weight-bold text-danger text-uppercase mt-2\"}>DELETE</div>\n          </a>\n        );\n      };\n\n      // add button\n      add_btn = (\n        <div className=\"row\">\n          <div className=\"col-xl-4 col-md-6 mb-4\">\n            <LLSplitButton theme=\"success\" icon=\"fas fa-plus-square\" on_click={() => this.set_form_hidden(false)}>\n              Add Pronunciation\n            </LLSplitButton>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"row\">\n          {this.props.data.map((val, id) => {\n            return (<LLBorderCard  theme=\"success\" key={id} title={val.get_language() + \" Pronunciation\"} \n                                  icon={\"fas fa-microphone-alt\"}>\n              {val.get_sound()}\n              {delete_btn(id)}\n            </LLBorderCard>);\n          })}\n        </div>\n        {add_btn}\n        {form}\n      </div>\n    );\n  }\n}\n\nexport default LLPronunciation;\n","import * as React from 'react';\nimport {LLBasicCard} from '../../components/Card';\nimport {LLSplitButton} from '../../components/Button';\nimport {LLLabelInput} from '../../components/Input';\nimport {LLOkCancelForm} from '../../components/Form';\nimport LLExampleData from '../../models/ExampleData';\n\nexport interface LLExampleProps {\n  read_only: boolean;\n  data: LLExampleData[];\n  on_add: (sentence: string) => void;\n  on_delete: (id: number) => void;\n  on_example_update: () => void;\n}\nexport interface LLExampleState {}\nclass LLExample extends React.Component<LLExampleProps, LLExampleState> {\n  pronunciation_form_hidden: boolean[] = [];\n  state = {\n    sentence_form_hidden: true,\n    example: {}\n  }\n  set_sentence_form_hidden(is_hidden : boolean) {\n    this.setState({'sentence_form_hidden': is_hidden});\n    return false;\n  }\n  set_pronunciation_form_hidden(e : any, id: number, is_hidden : boolean) {\n    if(e !== null) {\n      e.preventDefault();\n    }\n    this.pronunciation_form_hidden[id] = is_hidden;\n    this.setState(this.state);\n  }\n  add_example() {\n    let input = this.refs.sentence as LLLabelInput\n    this.props.on_add(input.value());\n    this.set_sentence_form_hidden(true);\n    return false;\n  }\n  delete_example(e: any, id: number) {\n    e.preventDefault();\n    this.props.on_delete(id);\n  }\n  add_example_sound(id: number) {\n    let language_input = this.refs[\"language_\"+id] as LLLabelInput;\n    let sound_input = this.refs[\"sound_\"+id] as LLLabelInput;\n    this.props.data[id].add_sound(language_input.value(), sound_input.value());\n    this.props.on_example_update();\n    this.set_pronunciation_form_hidden(null, id, true);\n  }\n  delete_example_sound(e: any, example_id: number, sound_id: number) {\n    e.preventDefault();\n    this.props.data[example_id].delete_sound(sound_id);\n    this.props.on_example_update();\n  }\n  render() {\n    let sentence_form = undefined;\n    let add_example = undefined;\n    let delete_example: any = () => {};\n    let sound_form: any = () => {};\n    let add_sound: any = () => {};\n    let delete_sound: any = () => {};\n    let example_card = undefined; \n\n    if(!this.props.read_only) {\n      // example form\n      if(!this.state.sentence_form_hidden) {\n        sentence_form = (\n          <div className=\"row\">\n            <div className=\"col-lg-12\">\n              <LLBasicCard>\n                <LLOkCancelForm \n                    ok_name=\"Add\" \n                    cancel_name=\"Close\" \n                    on_ok={() => this.add_example()} \n                    on_cancel={() => this.set_sentence_form_hidden(true)}>\n                  <LLLabelInput ref=\"sentence\" label=\"Sentence\"/>\n                </LLOkCancelForm>\n              </LLBasicCard>\n            </div>\n          </div>\n        );\n      }\n\n      // sound form\n      sound_form =(id : number) => { \n        if(this.pronunciation_form_hidden[id] || id >= this.pronunciation_form_hidden.length) {\n          return <React.Fragment/>\n        }\n        return (\n          <LLOkCancelForm \n              ok_name=\"Add\" \n              cancel_name=\"Close\" \n              on_ok={() => this.add_example_sound(id)} \n              on_cancel={() => this.set_pronunciation_form_hidden(null, id, true)}>\n            <LLLabelInput ref={\"language_\"+id} label=\"Language\"/>\n            <LLLabelInput ref={\"sound_\"+id} label=\"Sound\"/>\n          </LLOkCancelForm>\n        )\n      };\n\n      // add sound button\n      add_sound = (id: number) => {\n        return (\n          <a href=\"#/\" onClick={(e) => this.set_pronunciation_form_hidden(e, id, false)}>\n            <i className=\"fas fa-plus-square\"></i> Add Pronunciation\n          </a>\n        );\n      };\n\n      // delete sound button\n      delete_sound = (example_id: number, sound_id: number) => {\n        return (\n          <a href=\"#/\" onClick={(e) => {this.delete_example_sound(e, example_id, sound_id)}}>\n            <span className=\"text-danger mr-2\">[Delete]</span>\n          </a>\n        );\n      };\n\n      // delete example button\n      delete_example = (id: number) => {\n        return (\n          <a href=\"#/\" onClick={(e)=>{this.delete_example(e, id)}}>\n            <div className={\"text-xs font-weight-bold text-danger text-uppercase mt-2\"}>DELETE EXAMPLE</div>\n          </a>\n        );\n      };\n\n      // add eample button\n      add_example = (\n        <div className=\"row\">\n          <div className=\"col-xl-4 col-md-6 mb-4\">\n            <LLSplitButton theme=\"primary\" icon=\"fas fa-plus-square\" on_click={() => this.set_sentence_form_hidden(false)}>\n              Add Example\n            </LLSplitButton>\n          </div>\n        </div>\n      );\n    }\n\n    if(this.props.data.length > 0) {\n      example_card = (\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <LLBasicCard title=\"Examples\">\n              {this.props.data.map((example, example_id) => {\n                return (\n                  <div key={example_id}>\n                    <div>{example.get_sentence()}</div>\n                    <div>{example.get_sounds().map((sound, sound_id) => {\n                      return (\n                        <div key={sound_id}>\n                          <span className=\"text-primary mr-2\">[{sound.get_language()} Pronunciation]</span>\n                          {delete_sound(example_id, sound_id)}\n                          <span>{sound.get_sound()}</span>\n                        </div>\n                      );\n                    })}</div>\n                    {add_sound(example_id)}\n                    {sound_form(example_id)}\n                    {delete_example(example_id)}\n                    <div className=\"border-top my-3\"></div>\n                  </div>\n                );\n              })}\n            </LLBasicCard>\n          </div>\n        </div>\n      );\n    }   \n\n    return (\n      <div>\n        {example_card}\n        {add_example}\n        {sentence_form}\n      </div>\n    );\n  }\n}\n\nexport default LLExample;\n","import * as React from 'react';\nimport {LLBorderCard, LLBasicCard} from '../../components/Card';\nimport {LLSplitButton} from '../../components/Button';\nimport {LLOkCancelForm} from '../../components/Form';\nimport {LLLabelInput} from '../../components/Input';\n\nexport interface LLNativeProps {\n  read_only: boolean;\n  data: string[];\n  on_add: (form : string) => void;\n  on_delete: (index: number) => void;\n  on_resolve_keys: (array: string[]) => Map<string, string>;\n  on_word_select: (word: string) => void;\n}\nexport interface LLNativeState {}\nclass LLNative extends React.Component<LLNativeProps, LLNativeState> {\n  state = {\n    form_hidden: true\n  }\n  set_form_hidden(is_hidden : boolean) {\n    this.setState({'form_hidden': is_hidden});\n    return false;\n  }\n  add_native() {\n    let input = this.refs.native_form as LLLabelInput;\n    this.props.on_add(input.value());\n    this.set_form_hidden(true);\n  }\n  delete_native(e: any, id: number) {\n    e.preventDefault();\n    this.props.on_delete(id);\n  }\n  on_word_select(e: any, word: string) {\n    e.preventDefault();\n    this.props.on_word_select(word);\n  }\n  resolve_keys(val: string) {\n    let regex = /(#\\w{32})/g;\n    let match = undefined;\n    let md5_array = [];\n    let html = <React.Fragment>{val}</React.Fragment>;\n\n    // find all keys\n    while((match = regex.exec(val))) {\n      md5_array.push(match[0].slice(1));\n    }\n    // resolve them\n    if(md5_array.length > 0) {\n      let result = this.props.on_resolve_keys(md5_array);\n      let regex_val = \"\"\n      // build regex\n      result.forEach((word: string, key: string) => {\n        if(regex_val.length !== 0) {\n          regex_val += \"|\";\n        }\n        regex_val += \"#\" + key;\n      });\n      // construct new html\n      let split = val.split(new RegExp(\"(\"+regex_val+\")\", \"g\"));\n      html = (\n        <React.Fragment>\n          {split.map((part: string, id) => {\n            let slice: string;\n            if(part.startsWith(\"#\") && result.has(slice = part.slice(1))) {\n              let word_of_key = String(result.get(slice));\n              return <a \n                  key={id} \n                  onClick={(e) => this.on_word_select(e, word_of_key)} \n                  href=\"#/\">{word_of_key}</a>\n            }\n            return <React.Fragment key={id}>{part}</React.Fragment>\n          })}\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {html}\n      </React.Fragment>\n    );\n  }\n  render() {\n    let form = undefined;\n    let delete_btn: any = () => {};\n    let add_btn = undefined;\n    if(!this.props.read_only) {\n      // form\n      if(!this.state.form_hidden) {\n        form = (\n          <div className=\"row\">\n            <div className=\"col-lg-12\">\n              <LLBasicCard>\n                <LLOkCancelForm \n                    ok_name=\"Add\" \n                    cancel_name=\"Close\" \n                    on_ok={() => this.add_native()} \n                    on_cancel={() => this.set_form_hidden(true)}>\n                  <LLLabelInput ref=\"native_form\" label=\"Native Form\"/>\n                </LLOkCancelForm>\n              </LLBasicCard>\n            </div>\n          </div>\n        );\n      }\n\n      // delete button\n      delete_btn = (id: number) => {\n        return (\n          <a href=\"#/\" onClick={(e)=>{this.delete_native(e, id)}}>\n            <div className={\"text-xs font-weight-bold text-danger text-uppercase mt-2\"}>DELETE</div>\n          </a>\n        );\n      };\n    \n      // add button\n      add_btn = (\n        <div className=\"row\">\n          <div className=\"col-xl-4 col-md-6 mb-4\">\n            <LLSplitButton theme=\"info\" icon=\"fas fa-plus-square\" on_click={() => this.set_form_hidden(false)}>\n              Add Native Form\n            </LLSplitButton>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"row\">\n          {this.props.data.map((val, id) => {\n            return (\n              <LLBorderCard  key={id} theme=\"info\" title=\"Native form\" icon=\"fas fa-language\">\n                {this.resolve_keys(val)}\n                {delete_btn(id)}\n              </LLBorderCard>\n            );\n          })}\n        </div>\n        {add_btn}\n        {form}\n      </div>\n    );\n  }\n}\n\nexport default LLNative;\n","class LLSoundData {\n  constructor(private language: string, private sound: string) {}\n  public get_language() {\n    return this.language;\n  }\n  public get_sound() {\n    return this.sound;\n  }\n  public to_json() {\n    return {language: this.language, sound: this.sound};\n  }\n}\n\nexport default LLSoundData;\n","import LLSoundData from './SoundData';\n\nclass LLExampleData {\n  private sounds: LLSoundData[] = [];\n  constructor(private sentence: string) {}\n  public get_sentence() {\n    return this.sentence;\n  }\n  public add_sound(language: string, sound: string) {\n    this.sounds.push(new LLSoundData(language, sound));\n  }\n  public delete_sound(id: number) {\n    this.sounds.splice(id, 1);\n  }\n  public get_sounds() {\n    return this.sounds;\n  }\n  public to_json() {\n    let json: any = {};\n    json.sentence = this.sentence;\n    json.pronunciation = [];\n    this.sounds.forEach((val) => {\n      json.pronunciation.push(val.to_json());\n    });\n    return json;\n  }\n}\n\nexport default LLExampleData;\n","import * as React from 'react';\n\n// Components\nimport LLTitle from '../components/Title';\nimport {LLBasicCard} from '../components/Card';\nimport {LLSplitButton} from '../components/Button';\nimport {LLOkCancelForm} from '../components/Form';\nimport {LLLabelInput} from '../components/Input';\n\n// Sections\nimport LLPronunciation from './sections/Pronunciation';\nimport LLExample from './sections/Example';\nimport LLNative from './sections/Native';\n\n// Models\nimport LLWordData from '../models/WordData';\nimport LLExampleData from '../models/ExampleData';\n\nexport interface LLWordProps {\n  read_only: boolean;\n  word: LLWordData;\n  on_delete: (word: LLWordData) => void;\n  on_edit: (word: LLWordData) => void;\n  on_undo: (word: LLWordData) => void;\n  on_copy_word: (word: LLWordData) => void;\n  on_resolve_keys: (keys: string[]) => Map<string, string>;\n  on_word_select: (word: string) => void;\n}\n \nexport interface LLWordState {}\n \nclass LLWord extends React.Component<LLWordProps, LLWordState> {\n  state = {\n    word: this.props.word.clone(),\n    copy_form_hidden: true\n  }\n\n  set_copy_form_hidden(is_hidden: boolean) {\n    this.setState({copy_form_hidden: is_hidden});\n    return false;\n  }\n\n  undo_changes() {\n    this.setState({word: this.props.word.clone()});\n    this.props.on_undo(this.state.word);\n    return false;\n  }\n\n  update_word() {\n    this.setState(this.state);\n    this.props.on_edit(this.state.word);\n  }\n\n  copy_word() {\n    let input = this.refs.copy_word as LLLabelInput;\n    let copy = this.state.word.clone();\n    copy.set_word(input.value());\n    this.props.on_copy_word(copy);\n    this.set_copy_form_hidden(true);\n  }\n\n  add_native_handler(form: string) {\n    this.state.word.add_native(form);\n    this.update_word();\n  }\n\n  delete_native_handler(id: number) {\n    this.state.word.delete_native(id);\n    this.update_word();\n  }\n\n  add_pronunciation_handler(language: string, sound: string) {\n    this.state.word.add_pronunciation(language, sound);\n    this.update_word();\n  }\n\n  delete_pronunciation_handler(id: number) {\n    this.state.word.delete_pronunciation(id);\n    this.update_word();\n  }\n\n  add_example_handler(sentence: string) {\n    let example = new LLExampleData(sentence);\n    this.state.word.add_example(example);\n    this.update_word();\n  }\n\n  delete_example_handler(id: number) {\n    this.state.word.delete_example(id);\n    this.update_word();\n  }\n\n  update_example_handler() {\n    this.update_word();\n  }\n\n  render() {\n    let copy_form = undefined;\n    if(!this.state.copy_form_hidden && !this.props.read_only) {\n      copy_form = (\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <LLBasicCard>\n              <LLOkCancelForm \n                  ok_name=\"Copy\" \n                  cancel_name=\"Close\" \n                  on_ok={() => this.copy_word()} \n                  on_cancel={() => this.set_copy_form_hidden(true)}>\n                <LLLabelInput ref=\"copy_word\" label=\"Copy Word\"/>\n              </LLOkCancelForm>\n            </LLBasicCard>\n          </div>\n        </div>\n      );\n    }\n\n    let copy_button = undefined;\n    let undo_button = undefined;\n    let delete_button = undefined;\n    if(!this.props.read_only) {\n      copy_button = (\n        <LLSplitButton \n            theme=\"secondary\" \n            extra_class=\"btn-sm float-right\"\n            icon=\"far fa-copy\" \n            on_click={() => this.set_copy_form_hidden(false)}>\n          Copy Word\n        </LLSplitButton>\n      );\n\n      undo_button = (\n        <LLSplitButton \n            theme=\"danger\" \n            extra_class=\"btn-sm float-right mr-2\"\n            icon=\"far fa-trash-alt\" \n            on_click={() => this.undo_changes()}>\n          Undo Changes\n        </LLSplitButton>\n      );\n\n      delete_button = (\n        <div className=\"alert alert-warning\" role=\"alert\">\n          Click \"Delete\" to remove the word\n          <button className=\"btn btn-danger btn-sm float-right ml-2\" onClick={() => {this.props.on_delete(this.state.word)}}>Delete</button>\n        </div>\n      );\n    }\n\n\n    return (\n      <div className=\"m-2\">\n        <LLTitle>\n          <div>\n            <i className=\"far fa-file-word\"></i> <b>{this.state.word.get_word()}</b>\n            {copy_button}\n            {undo_button}\n          </div>\n          <div>\n            <small style={{fontSize:15}}className=\"text-secondary\"><em>key: {this.state.word.get_md5()}</em></small>\n          </div>\n        </LLTitle>\n        {copy_form}\n        <LLNative\n              read_only={this.props.read_only}\n              on_add={(form) => this.add_native_handler(form)} \n              on_delete={(id) => this.delete_native_handler(id)} \n              on_resolve_keys={this.props.on_resolve_keys}\n              on_word_select={this.props.on_word_select}\n              data={this.state.word.get_natives()}/>\n        <LLPronunciation  \n              read_only={this.props.read_only}\n              on_add={(language, sound) => this.add_pronunciation_handler(language, sound)} \n              on_delete={(id) => this.delete_pronunciation_handler(id)} \n              data={this.state.word.get_pronunciations()}/>\n        <LLExample \n              read_only={this.props.read_only}\n              on_add={(sentence) => this.add_example_handler(sentence)}\n              on_delete={(id) => this.delete_example_handler(id)}\n              on_example_update={() => this.update_example_handler()}\n              data={this.state.word.get_examples()}/>\n        {delete_button}\n      </div>\n    );\n  }\n}\n\nexport default LLWord;\n","import * as React from 'react';\nimport {LLOkCancelForm} from '../components/Form';\nimport {LLLabelInput} from '../components/Input';\nimport LLWordData from '../models/WordData';\n\nexport interface LLSearchProps {\n  read_only: boolean;\n  on_word_select: (word: string) => void;\n  on_new_word: (word: string) => void;\n  on_flashcard: () => void;\n  on_server_update: (url: string, port: string) => void;\n  words: LLWordData[];\n}\n \nexport interface LLSearchState {}\n \nclass LLSearch extends React.Component<LLSearchProps, LLSearchState> {\n  state = {\n    new_word_form_hidden: true,\n    server_form_hidden: true,\n    search_text: \"\",\n    server_url_text: \"http://localhost\",\n    server_port_text: \"3001\"\n  }\n\n  set_new_word_form_hidden(e: any, is_hidden : boolean) {\n    if(e !== null) {\n      e.preventDefault();\n    }\n    this.setState({'new_word_form_hidden': is_hidden});\n  }\n\n  set_server_form_hidden(e: any, is_hidden : boolean) {\n    if(e !== null) {\n      e.preventDefault();\n    }\n    this.setState({'server_form_hidden': is_hidden});\n  }\n  \n  flashcard_mode(e: any) {\n    e.preventDefault();\n    this.props.on_flashcard();\n  }\n\n  word_select(e: any, word: LLWordData) {\n    e.preventDefault();\n    this.props.on_word_select(word.get_word());\n  }\n\n  on_new_word() {\n    let input = this.refs.new_word as LLLabelInput;\n    this.props.on_new_word(input.value());\n    this.set_new_word_form_hidden(null, true);\n  }\n\n  on_search_change() {\n    let input = this.refs.search as HTMLInputElement;\n    this.setState({search_text: input.value});\n  }\n\n  on_server_update() {\n    let url_input = this.refs.url as LLLabelInput;\n    let port_input = this.refs.port as LLLabelInput;\n    this.setState({\n      server_url_text: url_input.value(),\n      server_port_text: port_input.value()\n    });\n    this.props.on_server_update(url_input.value(), port_input.value());\n  }\n\n  search_includes(word_data: LLWordData) {\n    let word = word_data.get_word();\n    let search_text = this.state.search_text;\n    if(search_text.length > word.length) {\n      return false;\n    }\n\n    // Ignore case sensitivity\n    search_text = search_text.toLowerCase();\n\n    // Letters in the search field must exist\n    // in the target 'word' and in the same order\n    let s_iter = 0;\n    let w_iter = 0;\n    while(s_iter < search_text.length && w_iter < word.length) {\n      if(search_text[s_iter] === word[w_iter]) {\n        s_iter++;\n      }\n      w_iter++;\n    }\n    return s_iter === search_text.length;\n  }\n\n  render() { \n    let new_word_form = undefined;\n    if(!this.state.new_word_form_hidden && !this.props.read_only) {\n      new_word_form = (\n        <div className=\"small col-md-12 text-white\">\n          <LLOkCancelForm \n              ok_name=\"Add\" \n              cancel_name=\"Close\" \n              on_ok={() => this.on_new_word()} \n              on_cancel={() => this.set_new_word_form_hidden(null, true)}>\n            <LLLabelInput ref=\"new_word\" label=\"Word\"/>\n          </LLOkCancelForm>\n        </div>\n      );\n    }\n\n    let new_word_button = undefined;\n    if(!this.props.read_only) {\n      new_word_button = (\n        <React.Fragment>\n          <hr className=\"sidebar-divider my-0\" />\n          <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"#/\" onClick={(e) => {this.set_new_word_form_hidden(e, false)}}>\n              <i className=\"fas fa-plus-square\"></i> New Word\n            </a>\n          </li>\n        </React.Fragment>\n      );\n    }\n\n    let server_form = undefined;\n    if(!this.state.server_form_hidden) {\n      server_form = (\n        <div className=\"small col-md-12 text-white\">\n          <LLOkCancelForm \n              ok_name=\"Update\" \n              cancel_name=\"Close\" \n              on_ok={() => this.on_server_update()} \n              on_cancel={() => this.set_server_form_hidden(null, true)}>\n            <LLLabelInput ref=\"url\" label=\"URL\" text={this.state.server_url_text}/>\n            <LLLabelInput ref=\"port\" label=\"Port\" text={this.state.server_port_text}/>\n          </LLOkCancelForm>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <form \n            className=\"d-none d-sm-inline-block form-inline mr-md-3 ml-md-3 my-2 my-md-0 mw-100 navbar-search\"\n            onSubmit={(e) => e.preventDefault()}>\n          <div className=\"input-group\">\n            <input  \n                type=\"text\" \n                ref=\"search\" \n                value={this.state.search_text}\n                className=\"form-control bg-light border-0 small\" \n                onChange={() => this.on_search_change()} \n                placeholder=\"Search for a word\"/>\n            <div className=\"input-group-append\">\n              <button className=\"btn btn-warning\">\n                <i className=\"fas fa-search fa-sm\"></i>\n              </button>\n            </div>\n          </div>\n        </form>\n\n        <hr className=\"sidebar-divider my-0\" />\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"#/\" onClick={(e) => {this.set_server_form_hidden(e, false)}}>\n            <i className=\"fas fa-server\"></i> Server\n          </a>\n        </li>\n        {server_form}\n\n        <hr className=\"sidebar-divider my-0\" />\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"#/\" onClick={(e) => {this.flashcard_mode(e)}}>\n            <i className=\"fas fa-comment-alt\"></i> Flashcard <small><em>({this.props.words.length})</em></small>\n          </a>\n        </li>\n\n        {new_word_button}\n        {new_word_form}\n\n        <hr className=\"sidebar-divider my-0\" />\n        <div style={{height: \"350px\"}}>\n          <div className=\"overflow-auto h-100 d-inline-block\">\n            {this.props.words.map((word: LLWordData, id: number) => {\n              return (\n                <React.Fragment key={id}>\n                  {this.search_includes(word) ? (\n                    <li className=\"nav-item\">\n                      <a className=\"nav-link\" href=\"#/\" onClick={(e) => {this.word_select(e, word)}}>{word.get_word()}</a>\n                    </li>\n                  ) : undefined}\n                </React.Fragment>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default LLSearch;\n","import * as React from 'react';\nimport LLTitle from '../components/Title';\nimport LLWordData from '../models/WordData';\nimport {LLBasicCard} from '../components/Card';\nimport {LLSplitButton} from '../components/Button';\nimport LLPronunciation from './sections/Pronunciation';\nimport LLExample from './sections/Example';\nimport LLNative from './sections/Native';\n\nexport interface LLFlashcardProps {\n  words_keys: string[];\n  on_show_word: (word: string, callback: (word: LLWordData) => void) => void;\n  on_resolve_keys: (keys: string[]) => Map<string, string>;\n  on_word_select: (word: string) => void;\n}\nexport interface LLFlashcardState {}\n \nclass LLFlashcard extends React.Component<LLFlashcardProps, LLFlashcardState> {\n  index: number = -1;\n  state: {\n    word: LLWordData | null;\n    hide_native: boolean;\n    hide_pronunciation: boolean;\n    hide_example: boolean;\n  } = {\n    word: null,\n    hide_native: true,\n    hide_pronunciation: true,\n    hide_example: true\n  }\n\n  new_word(word: LLWordData) {\n    this.setState({\n      word: word,\n      hide_native: true,\n      hide_pronunciation: true,\n      hide_example: true\n    });\n  }\n\n  next() {\n    if(this.props.words_keys.length > 0) {\n      this.index = (this.index + 1) % this.props.words_keys.length;\n      console.log(this.index);\n      this.props.on_show_word(this.props.words_keys[this.index], (word: LLWordData) => {\n        this.new_word(word);\n      });\n    }\n    return false;\n  }\n\n  previous() {\n    if(this.props.words_keys.length > 0) {\n      this.index = (this.index + (this.props.words_keys.length - 1)) % this.props.words_keys.length;\n      console.log(this.index);\n      this.props.on_show_word(this.props.words_keys[this.index], (word: LLWordData) => {\n        this.new_word(word);\n      });\n    }\n    return false;\n  }\n\n  show_native() {\n    this.setState({hide_native: false});\n    return false;\n  }\n\n  show_pronunciation() {\n    this.setState({hide_pronunciation: false});\n    return false;\n  }\n  \n  show_example() {\n    this.setState({hide_example: false});\n    return false;\n  }\n\n  render() {\n    let btn_class = \"\";\n    let main_page = undefined;\n    if(this.state.word === null) {\n      btn_class = \"disabled\";\n      main_page = (\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <LLBasicCard>\n              <div className=\"col-xl-12 col-md-12 mb-4 text-center\">\n                <div className=\"mb-4\">Click \"Start\" to begin the Flashcard exercise</div>\n                <LLSplitButton theme=\"secondary\" icon=\"fas fa-play\" on_click={() => this.next()}>\n                  Start\n                </LLSplitButton>\n              </div>\n            </LLBasicCard>\n          </div>\n        </div>\n      );\n    } else {\n\n      let native_section = undefined;\n      let pronunciation_section = undefined;\n      let example_section = undefined;\n      if(!this.state.hide_native) {\n        native_section = (\n          <LLNative\n                read_only={true}\n                on_resolve_keys={this.props.on_resolve_keys}\n                on_add={() => {}} \n                on_delete={() => {}} \n                on_word_select={this.props.on_word_select}\n                data={this.state.word.get_natives()}/>\n        );\n      }\n\n      if(!this.state.hide_pronunciation) {\n        pronunciation_section = (\n          <LLPronunciation  \n                read_only={true}\n                on_add={() => {}} \n                on_delete={() => {}} \n                data={this.state.word.get_pronunciations()}/>\n        ); \n      }\n\n      if(!this.state.hide_example) {\n        example_section = (\n          <LLExample \n                read_only={true}\n                on_add={() => {}}\n                on_delete={() => {}}\n                on_example_update={() => {}}\n                data={this.state.word.get_examples()}/>\n        );\n      }\n\n      main_page = (\n        <React.Fragment>\n          <LLTitle><i className=\"far fa-file-word\"></i> <b>{this.state.word.get_word()}</b></LLTitle>\n          <div className=\"row\">\n            <div className=\"col-lg-12 mb-4\">\n              <LLSplitButton \n                  theme=\"info\" \n                  icon=\"fas fa-eye\" \n                  extra_class={this.state.word.get_natives().length === 0 ? \"disabled\" : \"\"}\n                  on_click={() => this.show_native()}>\n                Show Native Form\n              </LLSplitButton>\n            </div>\n          </div>\n          {native_section}\n\n          <div className=\"row\">\n            <div className=\"col-lg-12 mb-4\">\n              <LLSplitButton \n                  theme=\"success\" \n                  icon=\"fas fa-eye\" \n                  extra_class={this.state.word.get_pronunciations().length === 0 ? \"disabled\" : \"\"}\n                  on_click={() => this.show_pronunciation()}>\n                Show Pronunciation\n              </LLSplitButton>\n            </div>\n          </div>\n          {pronunciation_section}\n\n          <div className=\"row\">\n            <div className=\"col-lg-12 mb-4\">\n              <LLSplitButton \n                  theme=\"primary\" \n                  icon=\"fas fa-eye\" \n                  extra_class={this.state.word.get_examples().length === 0 ? \"disabled\" : \"\"}\n                  on_click={() => this.show_example()}>\n                Show Example\n              </LLSplitButton>\n            </div>\n          </div>\n          {example_section}\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <div className=\"m-2\">\n        <LLTitle><i className=\"far afa-file-word\"></i> <b>Flashcard</b></LLTitle>\n        <div className=\"row\">\n          <div className=\"col-md-4 mb-4\">\n            <LLSplitButton \n                theme=\"secondary\" \n                icon=\"fas fa-arrow-left\" \n                extra_class={btn_class}\n                on_click={() => this.previous()}>\n              Previous\n            </LLSplitButton>\n          </div>\n          <div className=\"col-md-4 mb-4 text-center\">\n            {\n              (this.index >= 0) ? \n              (this.index+1 + \" / \" + this.props.words_keys.length) : \n              \"Total words: \" + this.props.words_keys.length\n            }\n          </div>\n          <div className=\"col-md-4 mb-4 text-right\">\n            <LLSplitButton \n                theme=\"secondary\" \n                icon=\"fas fa-arrow-right\" \n                extra_class={btn_class}\n                on_click={() => this.next()}>\n              Next\n            </LLSplitButton>\n          </div>\n        </div>\n        {main_page}\n      </div>\n    );\n  }\n}\n\nexport default LLFlashcard;\n","import * as React from 'react';\n\nexport interface LLNotificationProps {\n  theme: string;\n  text: string;\n  hidden: boolean;\n  button: string;\n  on_button_click: () => void;\n  on_close: () => void;\n}\nexport interface LLNotificationState {}\n \nclass LLNotification extends React.Component<LLNotificationProps, LLNotificationState> {\n  state = {}\n\n  render() {\n    if(this.props.hidden) {\n      return <React.Fragment/>\n    }\n    let button = <React.Fragment/>;\n    if(this.props.button.length > 0) {\n      button = (\n        <button className=\"btn btn-primary btn-sm float-right ml-2\" onClick={this.props.on_button_click}>\n          {this.props.button}\n        </button>\n      );\n    }\n    return (\n      <div className=\"m-2\">\n        <div className={\"alert alert-\"+this.props.theme+\" alert-dismissible fade show\"} role=\"alert\">\n          {this.props.text}\n          {button}\n          <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.props.on_close}>\n            <span>&times;</span>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LLNotification;\n","import LLWordData from './models/WordData';\nconst md5_lib = require('md5');\n\nexport type words_t = Map<string,LLWordData>;\n\nexport function md5(text: string): string {\n  return md5_lib(text);\n}\n\nexport function shuffle(array: any[]): void {\n  let current_id = array.length;\n  let tmp_val = undefined;\n  let rand_id = undefined;\n  while (0 !== current_id) {\n    rand_id = Math.floor(Math.random() * current_id);\n    current_id -= 1;\n    tmp_val = array[current_id];\n    array[current_id] = array[rand_id];\n    array[rand_id] = tmp_val;\n  }\n}\n","import LLExampleData from './ExampleData';\nimport LLSoundData from './SoundData';\nimport {md5} from '../Common';\n\nclass LLWordData {\n  private pronunciations: LLSoundData[] = [];\n  private examples: LLExampleData[] = [];\n  private natives: string[] = [];\n  constructor(private word: string) {}\n  public add_pronunciation(language: string, sound: string) {\n    this.pronunciations.push(new LLSoundData(language, sound));\n  }\n  public delete_pronunciation(id: number) {\n    this.pronunciations.splice(id, 1);\n  }\n  public get_pronunciations() {\n    return this.pronunciations;\n  }\n  public add_example(example: LLExampleData) {\n    this.examples.push(example);\n  }\n  public delete_example(id: number) {\n    this.examples.splice(id, 1);\n  }\n  public get_examples() {\n    return this.examples;\n  }\n  public get_word() {\n    return this.word;\n  }\n  public set_word(word: string) {\n    this.word = word;\n  }\n  public get_md5() {\n    return md5(this.get_word());\n  }\n  public add_native(native_form: string) {\n    this.natives.push(native_form);\n  }\n  public delete_native(id: number) {\n    this.natives.splice(id, 1);\n  }\n  public get_natives() {\n    return this.natives;\n  }\n  public static from_json(json: any) {\n    let word_data = new LLWordData(json.word);\n\n    json.native_form.forEach((val: string) => {\n      word_data.add_native(val);\n    });\n    json.pronunciation.forEach((val: any) => {\n      word_data.add_pronunciation(val.language, val.sound);\n    });\n    json.example.forEach((val: any) => {\n      let example = new LLExampleData(val.sentence);\n      val.pronunciation.forEach((pval: any) => {\n        example.add_sound(pval.language, pval.sound);\n      });\n      word_data.add_example(example);\n    });\n    \n    return word_data;\n  }\n  public to_json() {\n    let json : any = {};\n    json.word = this.word;\n    json.native_form = [];\n    this.natives.forEach((val: string) => {\n      json.native_form.push(val);\n    });\n    json.example = [];\n    this.examples.forEach((val: LLExampleData) => {\n      json.example.push(val.to_json());\n    });\n    json.pronunciation = [];\n    this.pronunciations.forEach((val: LLSoundData) => {\n      json.pronunciation.push(val.to_json());\n    });\n    return json;\n  }\n  public clone() {\n    return LLWordData.from_json(this.to_json());\n  }\n}\n\nexport default LLWordData;\n","/**\n  * THIS FILE IS AUTO-GENERATED BY LL_WORD ENGINE\n  * DO NOT MODIFY THE CONTENT OF THIS FILE\n  * BECAUSE THEY WILL BE OVERWRITTEN\n  */\nimport LLWordData from '../models/WordData';\nimport {md5, words_t} from '../Common';\n\nclass LLStaticData {\n  private words: words_t = new Map<string, LLWordData>();\n  get_words() {\n    return this.words;\n  }\n  get_word(word: string) {\n    return this.get_word_by_key(md5(word));\n  }\n  get_word_by_key(key: string) {\n    if(this.words.has(key)) {\n      return this.words.get(key)!;\n    }\n    return null;\n  }\n  add_word(word: LLWordData) {\n    this.words.set(word.get_md5(), word);\n  }\n  init_data() {\n    \n      this.add_word(LLWordData.from_json({\"word\":\"Tea\",\"native_form\":[\"茶\"],\"example\":[],\"pronunciation\":[{\"language\":\"English\",\"sound\":\"Chai\"}]}));\n    \n  }\n}\n\nexport default LLStaticData;\n","import LLWordData from '../models/WordData';\nimport LLStaticData from '../data/StaticData';\n\nclass LLRemoteServer {\n  private static_data: LLStaticData;\n  private last_connected_check = false;\n  constructor(private url: string | null, private port: string | null) {\n    this.static_data = new LLStaticData();\n    this.static_data.init_data();\n  }\n\n  private valid_url() {\n    return this.url !== null && this.port !== null;\n  }\n\n  private make_url(...args: string[]) {\n    let url = this.url + \":\" + this.port;\n    args.forEach((val) => {\n      url += \"/\" + encodeURI(val);\n    });\n    return url;\n  }\n\n  public get_url() {\n    return this.url;\n  }\n\n  public get_port() {\n    return this.port;\n  }\n\n  public get_words() {\n    return this.static_data.get_words();\n  }\n  \n  public get_word(word: string) : LLWordData | null {\n    return this.static_data.get_word(word)!;\n  }\n  \n  public get_word_by_key(key: string): LLWordData | null {\n    return this.static_data.get_word_by_key(key);\n  }\n\n  public was_ok() {\n    return this.last_connected_check;\n  }\n\n  public to_string() {\n    return \"URL: \" + this.get_url() + \" PORT: \" + this.get_port();\n  }\n\n  public is_ok(callback: () => void) {\n    if(!this.valid_url()) {\n      this.last_connected_check = false;\n      callback();\n      return;\n    }\n    fetch(this.make_url('ok'), {mode: 'cors'})\n    .then(response => response.json())\n    .then((json) => {\n      this.last_connected_check = json.success || false;\n      callback();\n    })\n    .catch(() => {\n      this.last_connected_check = false;\n      callback();\n    });\n  }\n  \n  public remove_word(word: string, callback: (success: boolean) => void) {\n    if(!this.valid_url()) {\n      callback(false);\n      return;\n    }\n    fetch(this.make_url('word', 'remove', word), {mode: 'cors'})\n    .then(response => response.json())\n    .then((json) => {\n      callback(json.success);\n    }).catch(() => {\n      callback(false);\n    });\n  }\n  \n  public set_word(word: LLWordData, callback: (success: boolean) => void) {\n    if(!this.valid_url()) {\n      callback(false);\n      return;\n    }\n    fetch(this.make_url('word','set'), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        word: word.get_word(),\n        json_data: JSON.stringify(word.to_json()),\n      })\n    })\n    .then(response => response.json())\n    .then((json) => {\n      let success_val = json.success || false;\n      if(success_val) {\n        this.static_data.add_word(word);\n      }\n      callback(success_val);\n    }).catch(() => {\n      callback(false);\n    });\n  }\n}\n\nexport default LLRemoteServer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport LLInfo from './pages/Info';\nimport LLWord from './pages/Word';\nimport LLSearch from './pages/Search';\nimport LLFlashcard from './pages/Flashcard';\nimport LLNotification from './pages/Notification';\nimport LLRemoteServer from './server/RemoteServer';\nimport LLWordData from './models/WordData';\nimport {shuffle} from './Common';\n\n// Server\nvar server = new LLRemoteServer(null, null);\n\n/**\n * Notification functions\n */\n\nfunction hide_notification() {\n  render_notification({hidden: true});\n}\n\nfunction save_notification(word: LLWordData, text: string) {\n  render_notification({\n    theme: \"warning\", \n    hidden: false, \n    text: text, \n    button: \"Save\", \n    on_button_click: () => {\n      save_handler(word)\n    }\n  });\n}\n\nfunction error_notification(text: string) {\n  render_notification({theme: \"danger\", hidden: false, text: text});\n}\n\nfunction success_notification(text: string) {\n  render_notification({theme: \"success\", hidden: false, text: text});\n}\n\nfunction warning_notification(text: string) {\n  render_notification({theme: \"warning\", hidden: false, text: text});\n}\n\n/**\n * Event handlers\n */\n\nfunction notification_close_handler() {\n  hide_notification();\n}\n\nfunction save_handler(word: LLWordData) {\n  server.set_word(word, (success: boolean) => {\n    if(success) {\n      render_search_panel();\n      render_word_panel(word.get_word());\n      success_notification(\"Word '\" + word.get_word() + \"' was saved successfully\");\n    } else {\n      error_notification(\"Failed to save '\" + word.get_word()+\"'\");\n    }\n  });\n}\n\nfunction delete_handler(word: LLWordData) {\n  server.remove_word(word.get_word(), (success: boolean) => {\n    if(success) {\n      render_homepage();\n      success_notification(\"Word '\" + word.get_word() + \"' was deleted successfully\");\n    } else {\n      error_notification(\"Failed to delete '\" + word.get_word()+\"'\");\n    }\n  });\n}\n\nfunction new_word_handler(word: string) {\n  save_handler(new LLWordData(word));\n}\n\nfunction word_select_handler(word: string) {\n  render_word_panel(word);\n}\n\nfunction word_updated_handler(word: LLWordData) {\n  save_notification(word, \"Click 'Save' after done editing, or 'Undo' to abort the changes\");\n}\n\nfunction word_reverted_handler(word: LLWordData) {\n  warning_notification(\"Changes for '\" + word.get_word() + \"' were discarded\");\n}\n\nfunction flashcard_handler() {\n  render_flashcard_panel();\n}\n\nfunction server_update_handler(url: string, port: string) {\n  connect_to_server(url, port);\n}\n\nfunction flashcard_show_word_handler(key: string, callback: (word: LLWordData) => void) {\n  let word_data = server.get_word_by_key(key);\n  if(word_data !== null) {\n    callback(word_data);\n  } else {\n    error_notification(\"Failed to load flashcard word\");\n  }\n}\n\nfunction copy_word_handler(word: LLWordData) {\n  save_handler(word);\n}\n\nfunction resolve_keys_handler(keys: string[]) {\n  let result: Map<string, string> = new Map();\n  keys.forEach((key: string) => {\n    let word_data = server.get_word_by_key(key);\n    if(word_data !== null) {\n      result.set(key, word_data.get_word());\n    }\n  });\n  return result;\n}\n\nfunction flashcard_word_select_handler(word: string) {\n  render_notification({\n    theme: \"warning\", \n    hidden: false, \n    text: \"Click on 'Visit Word' to exist flashcard exercise and show word '\" + word + \"' in regular mode\", \n    button: \"Visit Word\", \n    on_button_click: () => {\n      render_word_panel(word);\n    }\n  });\n}\n\n/**\n * Render functions\n */\n\nfunction render_info_panel() {\n  ReactDOM.render(<LLInfo/> ,document.getElementById('page-content'));\n}\n\nfunction render_homepage() {\n  render_logo();\n  render_search_panel();\n  render_info_panel();\n}\n\nfunction render_flashcard_panel() {\n  let words_keys = Array.from(server.get_words().keys());\n  shuffle(words_keys);\n  ReactDOM.render(<LLFlashcard\n    words_keys={words_keys}\n    on_word_select={flashcard_word_select_handler}\n    on_resolve_keys={resolve_keys_handler}\n    on_show_word={flashcard_show_word_handler}/> ,document.getElementById('page-content'));\n}\n\nfunction render_word_panel(word: string) {\n  let word_data = server.get_word(word);\n  if(word_data !== null) {\n    ReactDOM.render(<LLWord \n                        key={word_data.get_word()}\n                        word={word_data} \n                        read_only={!server.was_ok()}\n                        on_resolve_keys={resolve_keys_handler}\n                        on_copy_word={copy_word_handler}\n                        on_word_select={word_select_handler}\n                        on_edit={word_updated_handler}\n                        on_undo={word_reverted_handler}\n                        on_delete={delete_handler}/>, \n                    document.getElementById('page-content'));\n  } else {\n    error_notification(\"Failed to load word '\" + word + \"'\");\n  }\n}\n\nfunction render_search_panel() {\n  let words = server.get_words();\n  ReactDOM.render(<LLSearch \n                      read_only={!server.was_ok()}\n                      words={Array.from(words.values())} \n                      on_word_select={word_select_handler} \n                      on_flashcard={flashcard_handler} \n                      on_server_update={server_update_handler}\n                      on_new_word={new_word_handler}/>, \n                  document.getElementById('search-panel'));\n}\n\nfunction render_logo() {\n  ReactDOM.render((\n      <a className=\"sidebar-brand d-flex align-items-center justify-content-center\" href=\"#/\" onClick={() => render_info_panel()}>\n        <div className=\"sidebar-brand-icon rotate-n-15\"><i className=\"fas fa-language\"></i></div>\n        <div className=\"sidebar-brand-text mx-3\">Learn A Language</div>\n      </a>\n  ), document.getElementById('logo'));\n}\n\nfunction render_notification(config: any) {\n  config                  = config                  || {};\n  config.theme            = config.theme            || \"warning\";\n  config.text             = config.text             || \"\";\n  config.hidden           = config.hidden           || false;\n  config.button           = config.button           || \"\";\n  config.on_button_click  = config.on_button_click  || (() => {});\n  ReactDOM.render(<LLNotification \n                        hidden={config.hidden} \n                        theme={config.theme} \n                        text={config.text} \n                        button={config.button}\n                        on_button_click={config.on_button_click}\n                        on_close={notification_close_handler}/>, \n                  document.getElementById('notification'));\n}\n\n// Render default panels\n\nfunction connect_to_server(url: string, port: string) {\n  server = new LLRemoteServer(url, port);\n  server.is_ok(() => {\n    if(server.was_ok()) {\n      success_notification(\"Successfully connected to server \" + server.to_string());\n    } else {\n      error_notification(\"Failed to connect to server \" + server.to_string());\n    }\n    render_homepage();\n  });\n}\n\n(() => {\n  render_homepage();\n  serviceWorker.unregister();\n})();\n"],"sourceRoot":""}